#!/bin/bash

# MolEvolvR: Companion wrapper script
# accnum â€“> fasta â€“> deltablast -> edirect -> blastclust -> iprscan/rpsblast -> cleanup w/ lineages!
# To run on compute.cvm.msu.edu

# Created: 2020.07.09
# Last modified: 2020.12.14
# Authors: Lauren Sosinski, Janani Ravi
# On GitHub: currently in jravilab/molevol_scripts/upstream_scripts

# Input type: text file containing paths to individual fasta files to analyze

############
## TORQUE ##
############
#PBS -l nodes=1:ppn=10		# number of nodes requested
#PBS -m abe			# email notifications for job
#PBS -M=sosinsk7@msu.edu	# user email; RESET
#PBS -N molevol_analysis	# name of job being run

## print start/stop printf in individual scripts

## change output directory based on user input
OUTPATH=$PBS_O_WORKDIR
cd ${OUTPATH}

## !! NOTES FOR LS ##
## add flags/help function after finishing script and/or gencontext
## talk to Sam about how this works with Pins package

## USER INPUTS


## USAGE
## qsub /data/research/jravilab/molevol_scripts/upstream_scripts/00_wrapper_full.sb -F "input.txt F"
## qsub /data/research/jravilab/molevol_scripts/upstream_scripts/00_wrapper_full.sb -F "example_blastp.csv T"

# Location of databases/dependencies 
export BLASTDB=/data/common_data/blastdb/v6
export BLASTMAT=/opt/software/BLAST/2.2.26/data
export INTERPRO=/opt/software/iprscan/5.47.82.0-Python3/data:/data/common_data/iprscan:$INTERPRO
export NCBI_API_KEY=YOUR_KEY_HERE

#####################
## LOADING MODULES ##
#####################

# Prevent "module: command not found"
# Read more about it https://www.sdsc.edu/support/user_guides/tscc.html
source /etc/profile.d/modules.sh 

module purge 					## clear loaded modules
module load R		 			## load R
module load edirect 
module load BLAST				## load blast (for blastclust				## load edirect
module load iprscan 				## load iprscan

start=$SECONDS 					## get current time
START_DT=$(date '+%d/%m/%Y-%H:%M:%S')

#total=$(( ((3*60)+50)*60 ))			## total time the job can take in seconds, this should match your SBATCH line above
#maxtime=$(( 120*60 )) 				## maximum time to process one input, need to do some experimenting with your inputs
#===============================================================================
INPUTPATHS_LIST=$1
IS_QUERY=$2
HAS_SEQUENCES=$3
#===============================================================================
update_status () {
    # append status.txt with a message
    printf "%s\n" "$1" >> ../status.txt
}
#===============================================================================
if [ "$IS_QUERY" = "T" ]
# Handle the query data
then
    F=$(basename ${INPUTPATHS_LIST})
    PREFIX="query_data"
    OUTDIR=${OUTPATH}/${PREFIX}
    mkdir ${OUTDIR}				## make the directory
    cp ${INPUTPATHS_LIST} ${OUTDIR}/${PREFIX}.dblast.tsv
    cd ${OUTDIR} || exit
    if [ "$HAS_SEQUENCES" = "F" ]
    then
        acc2fa_start=$SECONDS
        sh /data/research/jravilab/molevol_scripts/upstream_scripts/02_acc2fa.sh ${OUTDIR}/${PREFIX}.dblast.tsv $PREFIX $OUTDIR
        acc2fa_dur=$(( $SECONDS - $acc2fa_start ))
    else
        cp ../seqs.fa ${OUTDIR}/${PREFIX}.all_accnums.fa
        cp ../accs.txt ${OUTDIR}/${PREFIX}.all_accnums.txt
    fi
else
    # Handle homolog data
	FILE=$(sed -n "${PBS_ARRAYID}"p "${INPUTPATHS_LIST}")
   	PREFIX=${FILE}	## takes PREFIX of file
   	OUTDIR=${OUTPATH}/${FILE}_blast	## variable containing output filepath based PREFIX
   	printf "${PREFIX}\n"			## make the directory
    cd ${OUTDIR} || exit

    ## ACC2FA -- getting fasta FILES for deltablast output(s)
	acc2fa_start=$SECONDS
	sh /data/research/jravilab/molevol_scripts/upstream_scripts/02_acc2fa.sh ${OUTDIR}/${PREFIX}.dblast.tsv $PREFIX $OUTDIR
	acc2fa_dur=$(( $SECONDS - $acc2fa_start ))

fi
## ACC2INFO ##
acc2info_start=$SECONDS
sh /data/research/jravilab/molevol_scripts/upstream_scripts/acc2info.sh ${OUTDIR}/${PREFIX}.all_accnums.txt $PREFIX $OUTDIR
acc2info_dur=$(( $SECONDS - $acc2info_start ))
## BLAST RESULT CLEANUP ##
blast_cln_start=$SECONDS
Rscript /data/research/jravilab/molevol_scripts/upstream_scripts/01.2_cleanup_blast.R ${OUTDIR}/${PREFIX}.dblast.tsv ${OUTDIR}/${PREFIX}.acc2info.tsv $PREFIX T
blast_cln_dur=$(( $SECONDS - $blast_cln_start ))
## BLASTCLUST ##
bclust_start=$SECONDS
sh /data/research/jravilab/molevol_scripts/upstream_scripts/03.1_blastclust.sh ${OUTDIR}/${PREFIX}.all_accnums.fa $PREFIX $OUTDIR
bclust_dur=$(( $SECONDS - $bclust_start ))

## CLUST2TABLE
c2t_start=$SECONDS
Rscript /data/research/jravilab/molevol_scripts/upstream_scripts/03.2_clust2table.R ${OUTDIR}/${PREFIX}.bclust.L60S80.tsv ${OUTDIR}/${PREFIX}.blast.cln.tsv
c2t_dur=$(( $SECONDS - $c2t_start ))

## INTERPROSCAN ##
## add second run for original protein, too
ipr_start=$SECONDS
sh /data/research/jravilab/molevol_scripts/upstream_scripts/04a_iprscan.sh ${OUTDIR}/${PREFIX}.all_accnums.fa ${PREFIX} ${OUTDIR}
ipr_dur=$(( $SECONDS - $ipr_start ))

## IPR2LIN ##
#Append colnames to beginning of ipr file
sed -i '1s/^/AccNum\tSeqMD5Digest\tSLength\tAnalysis\tDB.ID\tSignDesc\tStartLoc\tStopLoc\tScore\tStatus\tRunDate\tIPRAcc\tIPRDesc\n/' ${OUTDIR}/${PREFIX}.iprscan.tsv
ipr2lin_start=$SECONDS
Rscript /data/research/jravilab/molevol_scripts/upstream_scripts/01.4_ipr2lin.R ${OUTDIR}/${PREFIX}.iprscan.tsv ${OUTDIR}/${PREFIX}.acc2info.tsv $PREFIX
ipr2lin_dur=$(( $SECONDS - $ipr2lin_start ))

## IPR2DA ##
ipr2da_start=$SECONDS
Rscript /data/research/jravilab/molevol_scripts/upstream_scripts/05a_ipr2da.R ${OUTDIR}/${PREFIX}.iprscan_cln.tsv ${PREFIX} ${OUTDIR}/${PREFIX}.cln.clust.tsv
ipr2da_dur=$(( $SECONDS - $ipr2da_start ))

## RPSBLAST ##
rps_start=$SECONDS
#sh /data/research/jravilab/molevol_scripts/upstream_scripts/04b_rpsblast.sh ${OUTDIR}/${PREFIX}.all_accnums.fa ${PREFIX} ${OUTDIR}
rps_dur=$(( $SECONDS - $rps_start))

## RPS2DA ##
rps2da_start=$SECONDS
#Rscript /data/research/jravilab/molevol_scripts/upstream_scripts/05b_rps2da.R ${OUTDIR}/${PREFIX}.rps.out ${OUTDIR}/${PREFIX}.cln.clust.ipr.tsv ${PREFIX}
rps2da_dur=$(( $SECONDS - $rps2da_start ))

## Figure out how long the entire script took to run
dur=$(( $SECONDS - $start ))
printf "\nTotal run time: $dur\n"
STOP_DT=$(date '+%d/%m/%Y-%H:%M:%S')

## Add process times to logfile
printf "${START_DT}\t${STOP_DT}\t${acc2fa_dur}\t${acc2info_dur}\t${blast_cln_dur}\t${bclust_dur}\t${c2t_dur}\t${ipr_dur}\t${ipr2lin_dur}\t${ipr2da_dur}\t${rps_dur}\t${rps2da_dur}\t${dur}\n" >> ${OUTPATH}/logfile.tsv

NUM_RUNS=$(wc -l "${OUTPATH}"/logfile.tsv | grep -Eo "^[[:digit:]]+")
((NUM_RUNS-=1))
if [ -e "${OUTPATH}"/accs.txt ]
then
TOTAL_RUNS=$(wc -l "${OUTPATH}"/accs.txt | grep -Eo "^[[:digit:]]+")
((TOTAL_RUNS+=1))
else
TOTAL_RUNS=1
fi
if [ $TOTAL_RUNS = $NUM_RUNS ]
then
  touch ../done.txt
fi
 echo "${NUM_RUNS} / ${TOTAL_RUNS} jobs completed" > ../status.txt

