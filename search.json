[{"path":[]},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement janani.ravi@cuanschutz.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to MolEvolvR","title":"Contributing to MolEvolvR","text":"outlines propose change MolEvolvR. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to MolEvolvR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to MolEvolvR","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to MolEvolvR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"JRaviLab/MolEvolvR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to MolEvolvR","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. Lint Code: Ensure code adheres style guidelines using lintr: lintr::lint(\"path///file.R\") use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to MolEvolvR","text":"Please note MolEvolvR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"BSD 3-clause License","title":"BSD 3-clause License","text":"Copyright (c) 2024 MolEvolvR authors rights reserved. Redistribution use source binary forms, without modification, permitted provided following conditions met: Redistributions source code must retain copyright notice, list conditions following disclaimer. Redistributions binary form must reproduce copyright notice, list conditions following disclaimer documentation /materials provided distribution. Neither name copyright holder names contributors may used endorse promote products derived software without specific prior written permission. SOFTWARE PROVIDED COPYRIGHT HOLDERS CONTRIBUTORS “” EXPRESS IMPLIED WARRANTIES, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE DISCLAIMED. EVENT SHALL COPYRIGHT HOLDER CONTRIBUTORS LIABLE DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, LIMITED , PROCUREMENT SUBSTITUTE GOODS SERVICES; LOSS USE, DATA, PROFITS; BUSINESS INTERRUPTION) HOWEVER CAUSED THEORY LIABILITY, WHETHER CONTRACT, STRICT LIABILITY, TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING WAY USE SOFTWARE, EVEN ADVISED POSSIBILITY DAMAGE.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Janani Ravi. Author, maintainer. David Mayer. Author. Evan Brenner. Author. Faisal Alquaddoomi. Author. Samuel Chen. Contributor. Lo Sosinski. Contributor. Joseph Burke. Contributor. Jacob Krol. Contributor.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ravi J, Mayer D, Brenner E, Alquaddoomi F (2024). MolEvolvR: Molecular Evolution Phylogeny. R package version 0.99.9, https://jravilab.github.io/MolEvolvR/, https://github.com/jravilab/molevolvr.","code":"@Manual{,   title = {MolEvolvR: Molecular Evolution and Phylogeny},   author = {Janani Ravi and David Mayer and Evan Brenner and Faisal Alquaddoomi},   year = {2024},   note = {R package version 0.99.9, https://jravilab.github.io/MolEvolvR/},   url = {https://github.com/jravilab/molevolvr}, }"},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"molevolvr-","dir":"","previous_headings":"","what":"Molecular Evolution and Phylogeny","title":"Molecular Evolution and Phylogeny","text":"MolEvolvR R-package provides framework characterizing proteins using molecular evolution phylogeny. Check pkgdown page : jravilab.github.io/MolEvolvR","code":""},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Molecular Evolution and Phylogeny","text":"can install development version MolEvolvR GitHub :","code":"# Install Bioconductor if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(version = \"3.19\")  # Install Development Version of molevolvR BiocManager::install(\"JRaviLab/MolEvolvR\")"},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"loading-the-package","dir":"","previous_headings":"Installation","what":"Loading the package","title":"Molecular Evolution and Phylogeny","text":"","code":"library(molevolvR)"},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Molecular Evolution and Phylogeny","text":"basic example shows analyze favorite protein:","code":"library(molevolvR) ## basic example code ## TBA"},{"path":[]},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"related-molevolvr-codebases","dir":"","previous_headings":"Companion repos & projects","what":"Related MolEvolvR codebases","title":"Molecular Evolution and Phylogeny","text":"MolEvolvR web-app 1.0 | 🔒Repo | Live web-app | Preprint | Case studies MolEvolvR web-app 2.0 | 🔒Repo","code":""},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"specific-use-cases","dir":"","previous_headings":"Companion repos & projects","what":"Specific use cases","title":"Molecular Evolution and Phylogeny","text":"PSP evolution across tree life | 🔒Repo | Live web-app | PubMed Bacterial phage defense system, avcDI | Repo | PubMed DciA evolution across bacteria | Repo | PubMed Internalins Listeria | Repo | PubMed","code":""},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"current-contributors","dir":"","previous_headings":"","what":"Current contributors","title":"Molecular Evolution and Phylogeny","text":"David Mayer | R-package, back-end Faisal Alquaddoomi | Front-end 1.0, back-end Evan Brenner | MolEvolvR functionality Vince Rubinetti | Front-end 2.0 Dave Bunten | Data management, engineering Janani Ravi | PI","code":""},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"contribution-guidelines","dir":"","previous_headings":"Current contributors","what":"Contribution guidelines","title":"Molecular Evolution and Phylogeny","text":"welcome contributions community! ensure smooth collaborative process, please follow guidelines 📜 License","code":""},{"path":"https://jravilab.github.io/MolEvolvR/index.html","id":"code-of-conduct","dir":"","previous_headings":"Current contributors","what":"Code of Conduct","title":"Molecular Evolution and Phylogeny","text":"Please note MolEvolvR project released Contributor Code Conduct. contributing project, agree abide terms. ⏳ Stay tuned!","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/BinaryDomainNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Network — BinaryDomainNetwork","title":"Domain Network — BinaryDomainNetwork","text":"function creates domain network 'DomArch' column. Domains part 'domains_of_interest' different node color domains. network domains returned based shared domain architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/BinaryDomainNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Network — BinaryDomainNetwork","text":"","code":"BinaryDomainNetwork(   prot,   column = \"DomArch\",   domains_of_interest,   cutoff = 70,   layout = \"nice\",   query_color = adjustcolor(\"yellow\", alpha.f = 0.5),   partner_color = adjustcolor(\"skyblue\", alpha.f = 0.5),   border_color = adjustcolor(\"grey\", alpha.f = 0.8),   IsDirected = T )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/BinaryDomainNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Network — BinaryDomainNetwork","text":"prot data frame contains column 'DomArch'. column Name column containing Domain architecture nodes edges generated. cutoff Integer. use domains occur cutoff total counts cutoff_type \"Total Count\". use domains appear cutoff greater lineages cutoff_type Lineage. layout Character. Layout type used network. Options : \"circle\" \"random\" \"auto\" query_color Color nodes domains domains_of_interest vector colored partner_color Color nodes part domains_of_interest vector colored IsDirected network directed? Set false eliminate arrows","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/BinaryDomainNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Network — BinaryDomainNetwork","text":"","code":"if (FALSE) { # \\dontrun{ domain_network(pspa) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/DownloadAssemblySummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the combined assembly summaries of genbank and refseq — DownloadAssemblySummary","title":"Download the combined assembly summaries of genbank and refseq — DownloadAssemblySummary","text":"Download combined assembly summaries genbank refseq","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/DownloadAssemblySummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the combined assembly summaries of genbank and refseq — DownloadAssemblySummary","text":"","code":"DownloadAssemblySummary(   outpath,   keep = c(\"assembly_accession\", \"taxid\", \"species_taxid\", \"organism_name\") )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/DownloadAssemblySummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the combined assembly summaries of genbank and refseq — DownloadAssemblySummary","text":"outpath String path assembly summary file written keep Character vector containing columns retained downloaded","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/DownloadAssemblySummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download the combined assembly summaries of genbank and refseq — DownloadAssemblySummary","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GCA2lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","title":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","text":"Function map GCA_ID TaxID, TaxID Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GCA2lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","text":"","code":"GCA2lin(   prot_data,   assembly_path = \"/data/research/jravilab/common_data/assembly_summary_genbank.txt\",   lineagelookup_path = \"/data/research/jravilab/common_data/lineage_lookup.tsv\",   acc_col = \"AccNum\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/GCA2lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","text":"prot_data Dataframe containing column GCA_ID assembly_path String path assembly_summary path file can generated using \"DownloadAssemblySummary()\" function lineagelookup_path String path lineage lookup file (taxid lineage mapping). file can generated using \"create_lineage_lookup()\" function acc_col","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GCA2lin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","text":"Currently configured kingdom phylum","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GCA2lin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to map GCA_ID to TaxID, and TaxID to Lineage — GCA2lin","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GenContextNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Genomic Context Directed Network — GenContextNetwork","title":"Genomic Context Directed Network — GenContextNetwork","text":"function creates Genomic Context network 'GenContext' column. network Genomic Context returned.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GenContextNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genomic Context Directed Network — GenContextNetwork","text":"","code":"GenContextNetwork(   prot,   domains_of_interest,   column = \"GenContext\",   cutoff = 40,   layout = \"grid\",   directed = TRUE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/GenContextNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genomic Context Directed Network — GenContextNetwork","text":"prot data frame contains column 'GenContext'. domains_of_interest Character vector domains interest. column Name column containing Genomic Context nodes edges generated. cutoff Integer. use GenContexts occur cutoff percentage total count layout Character. Layout type used network. Options : \"circle\" \"random\" \"auto\" \"nice\" directed network directed?","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/GenContextNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genomic Context Directed Network — GenContextNetwork","text":"","code":"if (FALSE) { # \\dontrun{ gc_directed_network(pspa, column = \"GenContex\", cutoff = 55) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/LineagePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"LineagePlot — LineagePlot","title":"LineagePlot — LineagePlot","text":"Generate lineage plot","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/LineagePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LineagePlot — LineagePlot","text":"","code":"LineagePlot(prot, domains_of_interest, level = 3, label.size = 8)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/LineagePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LineagePlot — LineagePlot","text":"prot Data frame containing DomArch Lineage Columns domains_of_interest Vector domains check presence lineages level max depth Lineage. ie) = Kingdom, 2 = Phylum, 3 = class ... label.size Size text labels","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/LineagePlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LineagePlot — LineagePlot","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/LineagePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LineagePlot — LineagePlot","text":"","code":"if (FALSE) { # \\dontrun{ LineagePlot(psp_data,     c(         \"PspA\", \"Snf7\", \"Classical-AAA\", \"PspF\", \"PspB\", \"PspC\", \"ClgR\", \"PspM\",         \"Thioredoxin\", \"PspN_N\", \"DUF3046\", \"LiaI-LiaF-TM\", \"Toast_rack\", \"REC\",         \"HISKIN\", \"HAAS\", \"SHOCT-bihelical\", \"SHOCT-like\", \"Tfu_1009\", \"PspAA\",         \"Spermine_synth\", \"TM-Flotillin\", \"Band-7\", \"Betapropeller\",         \"MacB_PCD\", \"FTSW_RODA_SPOVE\", \"Cest_Tir\", \"SIGMA-HTH\", \"GNTR-HTH\",         \"DUF2089-HTH\", \"PadR-HTH\", \"RHH\", \"ZnR\"     ),     level = 2 ) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/RepresentativeAccNums.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate a vector of one Accession number per distinct observation from 'reduced' column — RepresentativeAccNums","title":"Function to generate a vector of one Accession number per distinct observation from 'reduced' column — RepresentativeAccNums","text":"Function generate vector one Accession number per distinct observation 'reduced' column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/RepresentativeAccNums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate a vector of one Accession number per distinct observation from 'reduced' column — RepresentativeAccNums","text":"","code":"RepresentativeAccNums(prot_data, reduced = \"Lineage\", accnum_col = \"AccNum\")  RepresentativeAccNums(prot_data, reduced = \"Lineage\", accnum_col = \"AccNum\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/RepresentativeAccNums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate a vector of one Accession number per distinct observation from 'reduced' column — RepresentativeAccNums","text":"prot_data Data frame containing Accession Numbers reduced Column prot_data distinct observations generated . One accession number assigned observations accnum_col Column prot_data contains Accession Numbers","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/RepresentativeAccNums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to generate a vector of one Accession number per distinct observation from 'reduced' column — RepresentativeAccNums","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2fa.html","id":null,"dir":"Reference","previous_headings":"","what":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","title":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","text":"Resulting fasta file written outpath. acc2fa converts protein accession numbers fasta format. Resulting fasta file written outpath.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2fa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","text":"","code":"acc2fa(accessions, outpath, plan = \"sequential\")  acc2fa(accessions, outpath, plan = \"sequential\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2fa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","text":"accessions Character vector containing protein accession numbers generate fasta sequences . Function may work vectors length > 10,000 outpath str. Location fasta file written . plan","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2fa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2fa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"acc2fa converts protein accession numbers to a fasta format. — acc2fa","text":"","code":"if (FALSE) { # \\dontrun{ acc2fa(accessions = c(\"ACU53894.1\", \"APJ14606.1\", \"ABK37082.1\"), outpath = \"my_proteins.fasta\") Entrez:accessions <- rep(\"ANY95992.1\", 201) |> acc2fa(outpath = \"entrez.fa\") EBI:accessions <- c(\"P12345\", \"Q9UHC1\", \"O15530\", \"Q14624\", \"P0DTD1\") |> acc2fa(outpath = \"ebi.fa\") } # } if (FALSE) { # \\dontrun{ acc2fa(accessions = c(\"ACU53894.1\", \"APJ14606.1\", \"ABK37082.1\"), outpath = \"my_proteins.fasta\") Entrez:accessions <- rep(\"ANY95992.1\", 201) |> acc2fa(outpath = \"entrez.fa\") EBI:accessions <- c(\"P12345\", \"Q9UHC1\", \"O15530\", \"Q14624\", \"P0DTD1\") |> acc2fa(outpath = \"ebi.fa\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":null,"dir":"Reference","previous_headings":"","what":"acc2lin — acc2lin","title":"acc2lin — acc2lin","text":"function combines 'efetch_ipg()' 'ipg2lin()' map set protein accessions assembly (GCA_ID), tax ID, lineage. Function map protein accession numbers lineage function combines 'efetch_ipg()' 'ipg2lin()' map set protein accessions assembly (GCA_ID), tax ID, lineage.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"acc2lin — acc2lin","text":"","code":"acc2lin(   accessions,   assembly_path,   lineagelookup_path,   ipgout_path = NULL,   plan = \"multicore\" )  acc2lin(   accessions,   assembly_path,   lineagelookup_path,   ipgout_path = NULL,   plan = \"multicore\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"acc2lin — acc2lin","text":"accessions Character vector protein accessions assembly_path String path assembly_summary path file can generated using \"DownloadAssemblySummary()\" function lineagelookup_path String path lineage lookup file (taxid lineage mapping). file can generated using ipgout_path Path write results efetch run accessions ipg database. NULL, file written. Defaults NULL plan","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"acc2lin — acc2lin","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acc2lin — acc2lin","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/acc2lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"acc2lin — acc2lin","text":"","code":"if (FALSE) { # \\dontrun{ acc2lin() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Leaves to an alignment file w/ accessions — add_leaves","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"Adding Leaves alignment file w/ accessions Genomic Contexts vs Domain Architectures. Adding Leaves alignment file w/ accessions Genomic Contexts vs Domain Architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"","code":"add_leaves(   aln_file = \"\",   lin_file = \"data/rawdata_tsv/all_semiclean.txt\",   reduced = FALSE )  add_leaves(   aln_file = \"\",   lin_file = \"data/rawdata_tsv/all_semiclean.txt\",   reduced = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"aln_file Character. Path file. Input tab-delimited file + alignment file accnum & alignment. Default 'pspa_snf7.aln' lin_file Character. Path file. Protein file accession + number lineage mapping. Default 'pspa.txt' reduced Boolean. TRUE, reduced data frame generated one sequence per lineage. Default FALSE.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"alignment file need two columns: 1. accession + number 2. alignment. protein homolog accession lineage mapping + file alignment file need two columns: 1. accession + number 2. alignment. protein homolog accession lineage mapping + file ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"Please refer source code alternate + file formats /column names. Please refer source code alternate + file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding Leaves to an alignment file w/ accessions — add_leaves","text":"","code":"if (FALSE) { # \\dontrun{ add_leaves(\"pspa_snf7.aln\", \"pspa.txt\") } # } if (FALSE) { # \\dontrun{ add_leaves(\"pspa_snf7.aln\", \"pspa.txt\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_lins.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Lineages — add_lins","title":"Add Lineages — add_lins","text":"Add Lineages add_lins","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_lins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Lineages — add_lins","text":"","code":"add_lins(   df,   acc_col = \"AccNum\",   assembly_path,   lineagelookup_path,   ipgout_path = NULL,   plan = \"multicore\" )  add_lins(   df,   acc_col = \"AccNum\",   assembly_path,   lineagelookup_path,   ipgout_path = NULL,   plan = \"multicore\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_lins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Lineages — add_lins","text":"plan","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_lins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Lineages — add_lins","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_lins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Lineages — add_lins","text":"","code":"if (FALSE) { # \\dontrun{ add_lins() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Name — add_name","title":"Add Name — add_name","text":"function adds new 'Name' column comprised components Kingdom, Phylum, Genus, species, well accession function adds new 'Name' column comprised components Kingdom, Phylum, Genus, species, well accession","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Name — add_name","text":"","code":"add_name(   data,   accnum_col = \"AccNum\",   spec_col = \"Species\",   lin_col = \"Lineage\",   lin_sep = \">\",   out_col = \"Name\" )  add_name(   data,   accnum_col = \"AccNum\",   spec_col = \"Species\",   lin_col = \"Lineage\",   lin_sep = \">\",   out_col = \"Name\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Name — add_name","text":"data Data add name column accnum_col Column containing accession numbers spec_col Column containing species lin_col Column containing lineage lin_sep Character separating lineage levels out_col Column contains new 'Name' derived Species, Lineage, AccNum info","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Name — add_name","text":"Original data 'Name' column Original data 'Name' column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Name — add_name","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"add_tax — add_tax","title":"add_tax — add_tax","text":"add_tax","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_tax — add_tax","text":"","code":"add_tax(data, acc_col = \"AccNum\", version = T)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/add_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_tax — add_tax","text":"version","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/advanced_opts2est_walltime.html","id":null,"dir":"Reference","previous_headings":"","what":"Given MolEvolvR advanced options and number of inputs, calculate the total estimated walltime for the job — advanced_opts2est_walltime","title":"Given MolEvolvR advanced options and number of inputs, calculate the total estimated walltime for the job — advanced_opts2est_walltime","text":"Given MolEvolvR advanced options number inputs, calculate total estimated walltime job","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/advanced_opts2est_walltime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given MolEvolvR advanced options and number of inputs, calculate the total estimated walltime for the job — advanced_opts2est_walltime","text":"","code":"advanced_opts2est_walltime(   advanced_opts,   n_inputs = 1L,   n_hits = NULL,   verbose = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/advanced_opts2est_walltime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given MolEvolvR advanced options and number of inputs, calculate the total estimated walltime for the job — advanced_opts2est_walltime","text":"advanced_opts character vector MolEvolvR advanced options (see make_opts2procs options) n_inputs total number input proteins","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/advanced_opts2est_walltime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given MolEvolvR advanced options and number of inputs, calculate the total estimated walltime for the job — advanced_opts2est_walltime","text":"total estimated number seconds job process (walltime) example: advanced_opts2est_walltime(c(\"homology_search\", \"domain_architecture\"), n_inputs = 3, n_hits = 50L)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/alignFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","title":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","text":"Perform Multiple Sequence Alignment FASTA file.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/alignFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","text":"","code":"alignFasta(fasta_file, tool = \"Muscle\", outpath = NULL)  alignFasta(fasta_file, tool = \"Muscle\", outpath = NULL)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/alignFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","text":"fasta_file Path FASTA file aligned tool Type alignment tool use. One three options: \"Muscle\", \"ClustalO\", \"ClustalW\" outpath Path write resulting alignment FASTA file. NULL, file written","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/alignFasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","text":"aligned fasta sequence MsaAAMultipleAlignment object aligned fasta sequence MsaAAMultipleAlignment object","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/alignFasta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform a Multiple Sequence Alignment on a FASTA file. — alignFasta","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/assert_count_df.html","id":null,"dir":"Reference","previous_headings":"","what":"assert_count_df — assert_count_df","title":"assert_count_df — assert_count_df","text":"assert_count_df","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/assert_count_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assert_count_df — assert_count_df","text":"","code":"assert_count_df(var)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/assert_count_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assert_count_df — assert_count_df","text":"var","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/assign_job_queue.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision function to assign job queue — assign_job_queue","title":"Decision function to assign job queue — assign_job_queue","text":"Decision function assign job queue","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/assign_job_queue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decision function to assign job queue — assign_job_queue","text":"","code":"assign_job_queue(t_sec_estimate, t_cutoff = 21600)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/assign_job_queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decision function to assign job queue — assign_job_queue","text":"t_sec_estimate estimated number seconds job process (advanced_opts2est_walltime()) t_long threshold value defines lower bound assigning job \"long queue\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/assign_job_queue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decision function to assign job queue — assign_job_queue","text":"string \"short\" \"long\" example: advanced_opts2est_walltime(c(\"homology_search\", \"domain_architecture\"), 3) |> assign_job_queue()","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_clust_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Cluster File — clean_clust_file","title":"Clean Cluster File — clean_clust_file","text":"Reads cleans cluster file function reads space-separated cluster file converts cleaned data frame.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_clust_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Cluster File — clean_clust_file","text":"","code":"clean_clust_file(path, writepath = NULL, query)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_clust_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Cluster File — clean_clust_file","text":"path character path cluster file cleaned writepath character designating tsv file cleaned cluster file written . value NULL file written. Default NULL query character identifying query file.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_clust_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Cluster File — clean_clust_file","text":"cleaned cluster data frame returned tsv file written \"writepath\" parameter used.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_clust_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Cluster File — clean_clust_file","text":"","code":"if (FALSE) { # \\dontrun{ clean_clust_file(\"data/pspa.op_ins_cls\", writepath = NULL, query = \"pspa\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean String — clean_string","title":"Clean String — clean_string","text":"Keep alphanumerics, \"\", \"+\", \".\" strings substitute spaces \"\". Used MolEvolvR codebase cleanup domain architecture values","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean String — clean_string","text":"","code":"clean_string(string)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean String — clean_string","text":"string","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean String — clean_string","text":"string string alphanumerics, \"_\", \"+\", \".\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/clean_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean String — clean_string","text":"","code":"if (FALSE) { # \\dontrun{ clean_string() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_GeneDesc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup GeneDesc — cleanup_GeneDesc","title":"Cleanup GeneDesc — cleanup_GeneDesc","text":"Cleanup GeneDesc","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_GeneDesc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup GeneDesc — cleanup_GeneDesc","text":"","code":"cleanup_GeneDesc(prot, column)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_GeneDesc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup GeneDesc — cleanup_GeneDesc","text":"column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_GeneDesc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup GeneDesc — cleanup_GeneDesc","text":"Return trailing period occurs GeneDesc column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_GeneDesc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup GeneDesc — cleanup_GeneDesc","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_GeneDesc() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup Clust — cleanup_clust","title":"Cleanup Clust — cleanup_clust","text":"Cleanup cluster file Cleans cluster file removing rows contain query cluster. function removes irrelevant rows contain query protein within ClustName column. return value cleaned data frame.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup Clust — cleanup_clust","text":"","code":"cleanup_clust(   prot,   domains_rename,   domains_keep,   repeat2s = TRUE,   remove_tails = FALSE,   remove_empty = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_clust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup Clust — cleanup_clust","text":"prot data frame must contain columns Query ClustName. domains_rename data frame containing domain names replaced column 'old' corresponding replacement values column 'new'. domains_keep data frame containing domain names retained. repeat2s Boolean. TRUE, repeated domains 'ClustName' condensed. Default TRUE. remove_tails Boolean. TRUE, 'ClustName' filtered based domains keep/remove. Default FALSE. remove_empty Boolean. TRUE, rows empty/unnecessary values 'ClustName' removed. Default FALSE.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_clust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup Clust — cleanup_clust","text":"Cleaned data frame","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_clust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup Clust — cleanup_clust","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_clust(prot, TRUE, FALSE, domains_keep, domains_rename) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_domarch.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup DomArch — cleanup_domarch","title":"Cleanup DomArch — cleanup_domarch","text":"Cleanup Domain Architectures Cleans DomArch column replacing/removing certain domains function cleans DomArch column one data frame renaming certain domains according second data frame. Certain domains can removed according additional data frame. original data frame returned clean DomArchs column old domains DomArchs.old column.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_domarch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup DomArch — cleanup_domarch","text":"","code":"cleanup_domarch(   prot,   old = \"DomArch.orig\",   new = \"DomArch\",   domains_keep,   domains_rename,   repeat2s = TRUE,   remove_tails = FALSE,   remove_empty = F,   domains_ignore = NULL )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_domarch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup DomArch — cleanup_domarch","text":"prot data frame containing 'DomArch' column domains_keep data frame containing domain names retained. domains_rename data frame containing domain names replaced column 'old' corresponding replacement values column 'new'. repeat2s Boolean. TRUE, repeated domains 'DomArch' condensed. Default TRUE. remove_tails Boolean. TRUE, 'ClustName' filtered based domains keep/remove. Default FALSE. remove_empty Boolean. TRUE, rows empty/unnecessary values 'DomArch' removed. Default FALSE. domains_ignore data frame containing domain names removed column called 'domains'","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_domarch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup DomArch — cleanup_domarch","text":"original data frame returned clean DomArchs column old domains DomArchs.old column.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_domarch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup DomArch — cleanup_domarch","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_domarch(prot, TRUE, FALSE, domains_keep, domains_rename, domains_ignore = NULL) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_fasta_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup FASTA Header — cleanup_fasta_header","title":"Cleanup FASTA Header — cleanup_fasta_header","text":"Parse accesion numbers fasta add suffix ith occurence handle duplicates","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_fasta_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup FASTA Header — cleanup_fasta_header","text":"","code":"cleanup_fasta_header(fasta)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_fasta_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup FASTA Header — cleanup_fasta_header","text":"fasta","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_fasta_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup FASTA Header — cleanup_fasta_header","text":"XStringSet fasta adjusted names (headers)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_fasta_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup FASTA Header — cleanup_fasta_header","text":"","code":"if (FALSE) { # \\dontrun{ AAStringSet(c(\"xxx\" = \"ATCG\", \"xxx\" = \"GGGC\")) |>     cleanup_fasta_header() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_gencontext.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup Genomic Contexts — cleanup_gencontext","title":"Cleanup Genomic Contexts — cleanup_gencontext","text":"Cleans GenContext column data frame removing certain characters rows. function removes empty rows based 'GenContext' column. cleaned version data table returned.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_gencontext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup Genomic Contexts — cleanup_gencontext","text":"","code":"cleanup_gencontext(   prot,   domains_rename = data.frame(old = character(0), new = character(0), stringsAsFactors =     F),   repeat2s = TRUE,   remove_asterisk = TRUE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_gencontext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup Genomic Contexts — cleanup_gencontext","text":"prot data frame contains columns 'GenContext.orig' domains_rename data frame containing domain names replaced column 'old' replacement column 'new'. Defaults empty data frame new old column non domains renamed repeat2s Boolean. TRUE, repeated domains 'GenContext' condensed. Default TRUE. remove_asterisk Boolean. TRUE, asterisks 'ClustName' removed. Default TRUE.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_gencontext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup Genomic Contexts — cleanup_gencontext","text":"cleaned version data table returned.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_gencontext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup Genomic Contexts — cleanup_gencontext","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_gencontext(prot, domains_rename, T, F) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_lineage.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup Lineage — cleanup_lineage","title":"Cleanup Lineage — cleanup_lineage","text":"Cleanup Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_lineage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup Lineage — cleanup_lineage","text":"","code":"cleanup_lineage(prot, lins_rename)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_lineage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup Lineage — cleanup_lineage","text":"lins_rename","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_lineage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup Lineage — cleanup_lineage","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_lineage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup Lineage — cleanup_lineage","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_lineage() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup Species — cleanup_species","title":"Cleanup Species — cleanup_species","text":"Cleanup Species Cleans species column data frame removing certain characters rows. function removes unneccessary characters 'Species' column. cleaned version data table returned.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup Species — cleanup_species","text":"","code":"cleanup_species(prot, remove_empty = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup Species — cleanup_species","text":"prot data frame contains columns 'Species'. remove_empty Boolean. TRUE, rows empty/unnecessary values 'Species' removed. Default false.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup Species — cleanup_species","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/cleanup_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup Species — cleanup_species","text":"","code":"if (FALSE) { # \\dontrun{ cleanup_species(prot, TRUE) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the combined assembly summaries of genbank and refseq — combine_files","title":"Download the combined assembly summaries of genbank and refseq — combine_files","text":"Download combined assembly summaries genbank refseq","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the combined assembly summaries of genbank and refseq — combine_files","text":"","code":"combine_files(   inpath = c(\"../molevol_data/project_data/phage_defense/\"),   pattern = \"*full_analysis.tsv\",   delim = \"\\t\",   skip = 0,   col_names = T )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the combined assembly summaries of genbank and refseq — combine_files","text":"inpath String 'master' path files reside (recursive=T) pattern Character vector containing search pattern files col_names Takes logical T/F arguments column names vector; usage similar col_names parameter readr::read_delim","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_files.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download the combined assembly summaries of genbank and refseq — combine_files","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining full_analysis files — combine_full","title":"Combining full_analysis files — combine_full","text":"Combining full_analysis files","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining full_analysis files — combine_full","text":"","code":"combine_full(inpath, ret = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining full_analysis files — combine_full","text":"ret","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_ipr.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining clean ipr files — combine_ipr","title":"Combining clean ipr files — combine_ipr","text":"Combining clean ipr files","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_ipr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining clean ipr files — combine_ipr","text":"","code":"combine_ipr(inpath, ret = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/combine_ipr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining clean ipr files — combine_ipr","text":"ret","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"Adding Leaves alignment file w/ accessions Genomic Contexts vs Domain Architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"","code":"convert_aln2fa(   aln_file = \"\",   lin_file = \"data/rawdata_tsv/all_semiclean.txt\",   fa_outpath = \"\",   reduced = FALSE )  convert_aln2fa(   aln_file = \"\",   lin_file = \"data/rawdata_tsv/all_semiclean.txt\",   fa_outpath = \"\",   reduced = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"aln_file Character. Path file. Input tab-delimited file + alignment file accnum & alignment. Default 'pspa_snf7.aln' lin_file Character. Path file. Protein file accession + number lineage mapping. Default 'pspa.txt' fa_outpath Character. Path written fasta file. Default 'NULL' reduced Boolean. TRUE, fasta file contain one sequence per lineage. Default 'FALSE'","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"alignment file need two columns: 1. accession + number 2. alignment. protein homolog accession lineage mapping + file alignment file need two columns: 1. accession + number 2. alignment. protein homolog accession lineage mapping + file ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"Please refer source code alternate + file formats /column names. Please refer source code alternate + file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_aln2fa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding Leaves to an alignment file w/ accessions — convert_aln2fa","text":"","code":"if (FALSE) { # \\dontrun{ add_leaves(\"pspa_snf7.aln\", \"pspa.txt\") } # }  if (FALSE) { # \\dontrun{ add_leaves(\"pspa_snf7.aln\", \"pspa.txt\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_fa2tre.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_fa2tre — convert_fa2tre","title":"convert_fa2tre — convert_fa2tre","text":"convert_fa2tre","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_fa2tre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_fa2tre — convert_fa2tre","text":"","code":"convert_fa2tre(   fa_path = here(\"data/alns/pspa_snf7.fa\"),   tre_path = here(\"data/alns/pspa_snf7.tre\"),   fasttree_path = here(\"src/FastTree\") )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/convert_fa2tre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_fa2tre — convert_fa2tre","text":"fasttree_path","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_bycol.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Bycol — count_bycol","title":"Count Bycol — count_bycol","text":"Count Bycol","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_bycol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Bycol — count_bycol","text":"","code":"count_bycol(prot = prot, column = \"DomArch\", min.freq = 1)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_bycol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Bycol — count_bycol","text":"min.freq","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_bycol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Bycol — count_bycol","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_bycol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Bycol — count_bycol","text":"","code":"if (FALSE) { # \\dontrun{ count_bycol() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_to_sunburst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive plotly from count data — count_to_sunburst","title":"Create an interactive plotly from count data — count_to_sunburst","text":"functions help quickly create interactive hierarchical plots categorical data. expect summary data created dplyr::count() produce either sunburst plot (count_to_sunburst()) treemap plot (count_to_treemap())","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_to_sunburst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive plotly from count data — count_to_sunburst","text":"","code":"count_to_sunburst(   count_data,   fill_by_n = FALSE,   sort_by_n = FALSE,   maxdepth = 2 )  count_to_treemap(count_data, fill_by_n = FALSE, sort_by_n = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_to_sunburst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive plotly from count data — count_to_sunburst","text":"count_data  fill_by_n TRUE, uses continuous scale fill plot group size sort_by_n","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/count_to_sunburst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive plotly from count data — count_to_sunburst","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union starwars_count <- count(starwars, species, eye_color, name)  # sunburst plot count_to_sunburst(starwars_count)  {\"x\":{\"visdat\":{\"17ea549fff9b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"17ea549fff9b\",\"attrs\":{\"17ea549fff9b\":{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\"branchvalues\":\"total\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"sunburst\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":false,\"branchvalues\":\"total\",\"type\":\"sunburst\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} # fill by group size count_to_sunburst(starwars_count, fill_by_n = TRUE)  {\"x\":{\"visdat\":{\"17ea98f858f\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"17ea98f858f\",\"attrs\":{\"17ea98f858f\":{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\"marker\":{\"colorbar\":{\"bgcolor\":\"\"},\"colorbar.1\":{\"bgcolor\":\"\"},\"colorbar.2\":{\"bgcolor\":\"\"},\"colorbar.3\":{\"bgcolor\":\"\"},\"colorbar.4\":{\"bgcolor\":\"\"},\"colorbar.5\":{\"bgcolor\":\"\"},\"colorbar.6\":{\"bgcolor\":\"\"},\"colorbar.7\":{\"bgcolor\":\"\"},\"colorbar.8\":{\"bgcolor\":\"\"},\"colorbar.9\":{\"bgcolor\":\"\"},\"colorbar.10\":{\"bgcolor\":\"\"},\"colorbar.11\":{\"bgcolor\":\"\"},\"colorbar.12\":{\"bgcolor\":\"\"},\"colorbar.13\":{\"bgcolor\":\"\"},\"colorbar.14\":{\"bgcolor\":\"\"},\"colorbar.15\":{\"bgcolor\":\"\"},\"colorbar.16\":{\"bgcolor\":\"\"},\"colorbar.17\":{\"bgcolor\":\"\"},\"colorbar.18\":{\"bgcolor\":\"\"},\"colorbar.19\":{\"bgcolor\":\"\"},\"colorbar.20\":{\"bgcolor\":\"\"},\"colorbar.21\":{\"bgcolor\":\"\"},\"colorbar.22\":{\"bgcolor\":\"\"},\"colorbar.23\":{\"bgcolor\":\"\"},\"colorbar.24\":{\"bgcolor\":\"\"},\"colorbar.25\":{\"bgcolor\":\"\"},\"colorbar.26\":{\"bgcolor\":\"\"},\"colorbar.27\":{\"bgcolor\":\"\"},\"colorbar.28\":{\"bgcolor\":\"\"},\"colorbar.29\":{\"bgcolor\":\"\"},\"colorbar.30\":{\"bgcolor\":\"\"},\"colorbar.31\":{\"bgcolor\":\"\"},\"colorbar.32\":{\"bgcolor\":\"\"},\"colorbar.33\":{\"bgcolor\":\"\"},\"colorbar.34\":{\"bgcolor\":\"\"},\"colorbar.35\":{\"bgcolor\":\"\"},\"colorbar.36\":{\"bgcolor\":\"\"},\"colorbar.37\":{\"bgcolor\":\"\"},\"colorbar.38\":{\"bgcolor\":\"\"},\"colorbar.39\":{\"bgcolor\":\"\"},\"colorbar.40\":{\"bgcolor\":\"\"},\"colorbar.41\":{\"bgcolor\":\"\"},\"colorbar.42\":{\"bgcolor\":\"\"},\"colorbar.43\":{\"bgcolor\":\"\"},\"colorbar.44\":{\"bgcolor\":\"\"},\"colorbar.45\":{\"bgcolor\":\"\"},\"colorbar.46\":{\"bgcolor\":\"\"},\"colorbar.47\":{\"bgcolor\":\"\"},\"colorbar.48\":{\"bgcolor\":\"\"},\"colorbar.49\":{\"bgcolor\":\"\"},\"colorbar.50\":{\"bgcolor\":\"\"},\"colorbar.51\":{\"bgcolor\":\"\"},\"colorbar.52\":{\"bgcolor\":\"\"},\"colorbar.53\":{\"bgcolor\":\"\"},\"colorbar.54\":{\"bgcolor\":\"\"},\"colorbar.55\":{\"bgcolor\":\"\"},\"colorbar.56\":{\"bgcolor\":\"\"},\"colorbar.57\":{\"bgcolor\":\"\"},\"colorbar.58\":{\"bgcolor\":\"\"},\"colorbar.59\":{\"bgcolor\":\"\"},\"colorbar.60\":{\"bgcolor\":\"\"},\"colorbar.61\":{\"bgcolor\":\"\"},\"colorbar.62\":{\"bgcolor\":\"\"},\"colorbar.63\":{\"bgcolor\":\"\"},\"colorbar.64\":{\"bgcolor\":\"\"},\"colorbar.65\":{\"bgcolor\":\"\"},\"colorbar.66\":{\"bgcolor\":\"\"},\"colorbar.67\":{\"bgcolor\":\"\"},\"colorbar.68\":{\"bgcolor\":\"\"},\"colorbar.69\":{\"bgcolor\":\"\"},\"colorbar.70\":{\"bgcolor\":\"\"},\"colorbar.71\":{\"bgcolor\":\"\"},\"colorbar.72\":{\"bgcolor\":\"\"},\"colorbar.73\":{\"bgcolor\":\"\"},\"colorbar.74\":{\"bgcolor\":\"\"},\"colorbar.75\":{\"bgcolor\":\"\"},\"colorbar.76\":{\"bgcolor\":\"\"},\"colorbar.77\":{\"bgcolor\":\"\"},\"colorbar.78\":{\"bgcolor\":\"\"},\"colorbar.79\":{\"bgcolor\":\"\"},\"colorbar.80\":{\"bgcolor\":\"\"},\"colorbar.81\":{\"bgcolor\":\"\"},\"colorbar.82\":{\"bgcolor\":\"\"},\"colorbar.83\":{\"bgcolor\":\"\"},\"colorbar.84\":{\"bgcolor\":\"\"},\"colorbar.85\":{\"bgcolor\":\"\"},\"colorbar.86\":{\"bgcolor\":\"\"},\"colorbar.87\":{\"bgcolor\":\"\"},\"colorbar.88\":{\"bgcolor\":\"\"},\"colorbar.89\":{\"bgcolor\":\"\"},\"colorbar.90\":{\"bgcolor\":\"\"},\"colorbar.91\":{\"bgcolor\":\"\"},\"colorbar.92\":{\"bgcolor\":\"\"},\"colorbar.93\":{\"bgcolor\":\"\"},\"colorbar.94\":{\"bgcolor\":\"\"},\"colorbar.95\":{\"bgcolor\":\"\"},\"colorbar.96\":{\"bgcolor\":\"\"},\"colorbar.97\":{\"bgcolor\":\"\"},\"colorbar.98\":{\"bgcolor\":\"\"},\"colorbar.99\":{\"bgcolor\":\"\"},\"colorbar.100\":{\"bgcolor\":\"\"},\"colorbar.101\":{\"bgcolor\":\"\"},\"colorbar.102\":{\"bgcolor\":\"\"},\"colorbar.103\":{\"bgcolor\":\"\"},\"colorbar.104\":{\"bgcolor\":\"\"},\"colorbar.105\":{\"bgcolor\":\"\"},\"colorbar.106\":{\"bgcolor\":\"\"},\"colorbar.107\":{\"bgcolor\":\"\"},\"colorbar.108\":{\"bgcolor\":\"\"},\"colorbar.109\":{\"bgcolor\":\"\"},\"colorbar.110\":{\"bgcolor\":\"\"},\"colorbar.111\":{\"bgcolor\":\"\"},\"colorbar.112\":{\"bgcolor\":\"\"},\"colorbar.113\":{\"bgcolor\":\"\"},\"colorbar.114\":{\"bgcolor\":\"\"},\"colorbar.115\":{\"bgcolor\":\"\"},\"colorbar.116\":{\"bgcolor\":\"\"},\"colorbar.117\":{\"bgcolor\":\"\"},\"colorbar.118\":{\"bgcolor\":\"\"},\"colorbar.119\":{\"bgcolor\":\"\"},\"colorbar.120\":{\"bgcolor\":\"\"},\"colorbar.121\":{\"bgcolor\":\"\"},\"colorbar.122\":{\"bgcolor\":\"\"},\"colorbar.123\":{\"bgcolor\":\"\"},\"colorbar.124\":{\"bgcolor\":\"\"},\"colorbar.125\":{\"bgcolor\":\"\"},\"colorbar.126\":{\"bgcolor\":\"\"},\"colorbar.127\":{\"bgcolor\":\"\"},\"colorbar.128\":{\"bgcolor\":\"\"},\"colorbar.129\":{\"bgcolor\":\"\"},\"colorbar.130\":{\"bgcolor\":\"\"},\"colorbar.131\":{\"bgcolor\":\"\"},\"colorbar.132\":{\"bgcolor\":\"\"},\"colorbar.133\":{\"bgcolor\":\"\"},\"colorbar.134\":{\"bgcolor\":\"\"},\"colorbar.135\":{\"bgcolor\":\"\"},\"colorbar.136\":{\"bgcolor\":\"\"},\"colorbar.137\":{\"bgcolor\":\"\"},\"colorbar.138\":{\"bgcolor\":\"\"},\"colorbar.139\":{\"bgcolor\":\"\"},\"colorbar.140\":{\"bgcolor\":\"\"},\"colorbar.141\":{\"bgcolor\":\"\"},\"colorbar.142\":{\"bgcolor\":\"\"},\"colorbar.143\":{\"bgcolor\":\"\"},\"colorbar.144\":{\"bgcolor\":\"\"},\"colorbar.145\":{\"bgcolor\":\"\"},\"colorbar.146\":{\"bgcolor\":\"\"},\"colorbar.147\":{\"bgcolor\":\"\"},\"colorbar.148\":{\"bgcolor\":\"\"},\"colorbar.149\":{\"bgcolor\":\"\"},\"colorbar.150\":{\"bgcolor\":\"\"},\"colorbar.151\":{\"bgcolor\":\"\"},\"colorbar.152\":{\"bgcolor\":\"\"},\"colorbar.153\":{\"bgcolor\":\"\"},\"colorbar.154\":{\"bgcolor\":\"\"},\"colorbar.155\":{\"bgcolor\":\"\"},\"colorbar.156\":{\"bgcolor\":\"\"},\"colorbar.157\":{\"bgcolor\":\"\"},\"colorbar.158\":{\"bgcolor\":\"\"},\"colorbar.159\":{\"bgcolor\":\"\"},\"colorbar.160\":{\"bgcolor\":\"\"},\"colorbar.161\":{\"bgcolor\":\"\"},\"colorbar.162\":{\"bgcolor\":\"\"},\"colorbar.163\":{\"bgcolor\":\"\"},\"colorbar.164\":{\"bgcolor\":\"\"},\"colorbar.165\":{\"bgcolor\":\"\"},\"colorbar.166\":{\"bgcolor\":\"\"},\"colorbar.167\":{\"bgcolor\":\"\"},\"colorbar.168\":{\"bgcolor\":\"\"},\"colorbar.169\":{\"bgcolor\":\"\"},\"colorbar.170\":{\"bgcolor\":\"\"},\"colorbar.171\":{\"bgcolor\":\"\"},\"colorbar.172\":{\"bgcolor\":\"\"},\"colorbar.173\":{\"bgcolor\":\"\"},\"colorbar.174\":{\"bgcolor\":\"\"},\"colorbar.175\":{\"bgcolor\":\"\"}},\"branchvalues\":\"total\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"sunburst\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":false,\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"colorbar\":{\"bgcolor\":\"\"},\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"branchvalues\":\"total\",\"type\":\"sunburst\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} # treemap plot, ordered by group size count_to_treemap(starwars_count, sort_by_n = TRUE)  {\"x\":{\"visdat\":{\"17ea33d3626b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"17ea33d3626b\",\"attrs\":{\"17ea33d3626b\":{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"branchvalues\":\"total\",\"hoverinfo\":\"text\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"treemap\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"ids\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.white\",\"Aleena.->.unknown.->.Ratts Tyerel\",\"Besalisk.->.yellow.->.Dexter Jettster\",\"Cerean.->.yellow.->.Ki-Adi-Mundi\",\"Chagrian.->.blue.->.Mas Amedda\",\"Clawdite.->.yellow.->.Zam Wesell\",\"Droid.->.black.->.BB8\",\"Droid.->.red.->.IG-88\",\"Droid.->.red.->.R2-D2\",\"Droid.->.red.->.R5-D4\",\"Droid.->.red, blue.->.R4-P17\",\"Droid.->.yellow.->.C-3PO\",\"Dug.->.orange.->.Sebulba\",\"Ewok.->.brown.->.Wicket Systri Warrick\",\"Geonosian.->.yellow.->.Poggle the Lesser\",\"Gungan.->.orange.->.Jar Jar Binks\",\"Gungan.->.orange.->.Roos Tarpals\",\"Gungan.->.orange.->.Rugor Nass\",\"Human.->.blue.->.Anakin Skywalker\",\"Human.->.blue.->.Beru Whitesun Lars\",\"Human.->.blue.->.Cliegg Lars\",\"Human.->.blue.->.Finis Valorum\",\"Human.->.blue.->.Jocasta Nu\",\"Human.->.blue.->.Lobot\",\"Human.->.blue.->.Luke Skywalker\",\"Human.->.blue.->.Mon Mothma\",\"Human.->.blue.->.Owen Lars\",\"Human.->.blue.->.Qui-Gon Jinn\",\"Human.->.blue.->.Ric Olié\",\"Human.->.blue.->.Wilhuff Tarkin\",\"Human.->.blue-gray.->.Obi-Wan Kenobi\",\"Human.->.brown.->.Arvel Crynyd\",\"Human.->.brown.->.Bail Prestor Organa\",\"Human.->.brown.->.Biggs Darklighter\",\"Human.->.brown.->.Boba Fett\",\"Human.->.brown.->.Dooku\",\"Human.->.brown.->.Dormé\",\"Human.->.brown.->.Han Solo\",\"Human.->.brown.->.Jango Fett\",\"Human.->.brown.->.Lando Calrissian\",\"Human.->.brown.->.Leia Organa\",\"Human.->.brown.->.Mace Windu\",\"Human.->.brown.->.Padmé Amidala\",\"Human.->.brown.->.Poe Dameron\",\"Human.->.brown.->.Quarsh Panaka\",\"Human.->.brown.->.Raymus Antilles\",\"Human.->.brown.->.Shmi Skywalker\",\"Human.->.dark.->.Finn\",\"Human.->.hazel.->.Rey\",\"Human.->.hazel.->.Wedge Antilles\",\"Human.->.unknown.->.Captain Phasma\",\"Human.->.yellow.->.Darth Vader\",\"Human.->.yellow.->.Palpatine\",\"Hutt.->.orange.->.Jabba Desilijic Tiure\",\"Iktotchi.->.orange.->.Saesee Tiin\",\"Kaleesh.->.green, yellow.->.Grievous\",\"Kaminoan.->.black.->.Lama Su\",\"Kaminoan.->.black.->.Taun We\",\"Kel Dor.->.black.->.Plo Koon\",\"Mirialan.->.blue.->.Barriss Offee\",\"Mirialan.->.blue.->.Luminara Unduli\",\"Mon Calamari.->.orange.->.Ackbar\",\"Muun.->.gold.->.San Hill\",\"Nautolan.->.black.->.Kit Fisto\",\"Neimodian.->.red.->.Nute Gunray\",\"Pau'an.->.black.->.Tion Medon\",\"Quermian.->.yellow.->.Yarael Poof\",\"Rodian.->.black.->.Greedo\",\"Skakoan.->.unknown.->.Wat Tambor\",\"Sullustan.->.black.->.Nien Nunb\",\"Tholothian.->.blue.->.Adi Gallia\",\"Togruta.->.black.->.Shaak Ti\",\"Toong.->.orange.->.Ben Quadinaros\",\"Toydarian.->.yellow.->.Watto\",\"Trandoshan.->.red.->.Bossk\",\"Twi'lek.->.hazel.->.Ayla Secura\",\"Twi'lek.->.pink.->.Bib Fortuna\",\"Vulptereen.->.yellow.->.Dud Bolt\",\"Wookiee.->.blue.->.Chewbacca\",\"Wookiee.->.blue.->.Tarfful\",\"Xexto.->.black.->.Gasgano\",\"Yoda's species.->.brown.->.Yoda\",\"Zabrak.->.brown.->.Eeth Koth\",\"Zabrak.->.yellow.->.Darth Maul\",\"NA.->.blue.->.Jek Tono Porkins\",\"NA.->.brown.->.Cordé\",\"NA.->.brown.->.Gregar Typho\",\"NA.->.white.->.Sly Moore\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Droid\",\"Droid\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",\"Zabrak\",\"NA\",\"NA\",\"NA\",\"Aleena.->.unknown\",\"Besalisk.->.yellow\",\"Cerean.->.yellow\",\"Chagrian.->.blue\",\"Clawdite.->.yellow\",\"Droid.->.black\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red\",\"Droid.->.red, blue\",\"Droid.->.yellow\",\"Dug.->.orange\",\"Ewok.->.brown\",\"Geonosian.->.yellow\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Gungan.->.orange\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue\",\"Human.->.blue-gray\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.brown\",\"Human.->.dark\",\"Human.->.hazel\",\"Human.->.hazel\",\"Human.->.unknown\",\"Human.->.yellow\",\"Human.->.yellow\",\"Hutt.->.orange\",\"Iktotchi.->.orange\",\"Kaleesh.->.green, yellow\",\"Kaminoan.->.black\",\"Kaminoan.->.black\",\"Kel Dor.->.black\",\"Mirialan.->.blue\",\"Mirialan.->.blue\",\"Mon Calamari.->.orange\",\"Muun.->.gold\",\"Nautolan.->.black\",\"Neimodian.->.red\",\"Pau'an.->.black\",\"Quermian.->.yellow\",\"Rodian.->.black\",\"Skakoan.->.unknown\",\"Sullustan.->.black\",\"Tholothian.->.blue\",\"Togruta.->.black\",\"Toong.->.orange\",\"Toydarian.->.yellow\",\"Trandoshan.->.red\",\"Twi'lek.->.hazel\",\"Twi'lek.->.pink\",\"Vulptereen.->.yellow\",\"Wookiee.->.blue\",\"Wookiee.->.blue\",\"Xexto.->.black\",\"Yoda's species.->.brown\",\"Zabrak.->.brown\",\"Zabrak.->.yellow\",\"NA.->.blue\",\"NA.->.brown\",\"NA.->.brown\",\"NA.->.white\"],\"labels\":[\"Aleena\",\"Besalisk\",\"Cerean\",\"Chagrian\",\"Clawdite\",\"Droid\",\"Dug\",\"Ewok\",\"Geonosian\",\"Gungan\",\"Human\",\"Hutt\",\"Iktotchi\",\"Kaleesh\",\"Kaminoan\",\"Kel Dor\",\"Mirialan\",\"Mon Calamari\",\"Muun\",\"Nautolan\",\"Neimodian\",\"Pau'an\",\"Quermian\",\"Rodian\",\"Skakoan\",\"Sullustan\",\"Tholothian\",\"Togruta\",\"Toong\",\"Toydarian\",\"Trandoshan\",\"Twi'lek\",\"Vulptereen\",\"Wookiee\",\"Xexto\",\"Yoda's species\",\"Zabrak\",null,\"unknown\",\"yellow\",\"yellow\",\"blue\",\"yellow\",\"black\",\"red\",\"red, blue\",\"yellow\",\"orange\",\"brown\",\"yellow\",\"orange\",\"blue\",\"blue-gray\",\"brown\",\"dark\",\"hazel\",\"unknown\",\"yellow\",\"orange\",\"orange\",\"green, yellow\",\"black\",\"black\",\"blue\",\"orange\",\"gold\",\"black\",\"red\",\"black\",\"yellow\",\"black\",\"unknown\",\"black\",\"blue\",\"black\",\"orange\",\"yellow\",\"red\",\"hazel\",\"pink\",\"yellow\",\"blue\",\"black\",\"brown\",\"brown\",\"yellow\",\"blue\",\"brown\",\"white\",\"Ratts Tyerel\",\"Dexter Jettster\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Zam Wesell\",\"BB8\",\"IG-88\",\"R2-D2\",\"R5-D4\",\"R4-P17\",\"C-3PO\",\"Sebulba\",\"Wicket Systri Warrick\",\"Poggle the Lesser\",\"Jar Jar Binks\",\"Roos Tarpals\",\"Rugor Nass\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Cliegg Lars\",\"Finis Valorum\",\"Jocasta Nu\",\"Lobot\",\"Luke Skywalker\",\"Mon Mothma\",\"Owen Lars\",\"Qui-Gon Jinn\",\"Ric Olié\",\"Wilhuff Tarkin\",\"Obi-Wan Kenobi\",\"Arvel Crynyd\",\"Bail Prestor Organa\",\"Biggs Darklighter\",\"Boba Fett\",\"Dooku\",\"Dormé\",\"Han Solo\",\"Jango Fett\",\"Lando Calrissian\",\"Leia Organa\",\"Mace Windu\",\"Padmé Amidala\",\"Poe Dameron\",\"Quarsh Panaka\",\"Raymus Antilles\",\"Shmi Skywalker\",\"Finn\",\"Rey\",\"Wedge Antilles\",\"Captain Phasma\",\"Darth Vader\",\"Palpatine\",\"Jabba Desilijic Tiure\",\"Saesee Tiin\",\"Grievous\",\"Lama Su\",\"Taun We\",\"Plo Koon\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Kit Fisto\",\"Nute Gunray\",\"Tion Medon\",\"Yarael Poof\",\"Greedo\",\"Wat Tambor\",\"Nien Nunb\",\"Adi Gallia\",\"Shaak Ti\",\"Ben Quadinaros\",\"Watto\",\"Bossk\",\"Ayla Secura\",\"Bib Fortuna\",\"Dud Bolt\",\"Chewbacca\",\"Tarfful\",\"Gasgano\",\"Yoda\",\"Eeth Koth\",\"Darth Maul\",\"Jek Tono Porkins\",\"Cordé\",\"Gregar Typho\",\"Sly Moore\"],\"values\":[1,1,1,1,1,6,1,1,1,3,35,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,4,1,1,1,1,1,1,3,1,1,1,1,1,3,12,1,16,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: species<br />value: Aleena<br />n: 1\",\"column: species<br />value: Besalisk<br />n: 1\",\"column: species<br />value: Cerean<br />n: 1\",\"column: species<br />value: Chagrian<br />n: 1\",\"column: species<br />value: Clawdite<br />n: 1\",\"column: species<br />value: Droid<br />n: 6\",\"column: species<br />value: Dug<br />n: 1\",\"column: species<br />value: Ewok<br />n: 1\",\"column: species<br />value: Geonosian<br />n: 1\",\"column: species<br />value: Gungan<br />n: 3\",\"column: species<br />value: Human<br />n: 35\",\"column: species<br />value: Hutt<br />n: 1\",\"column: species<br />value: Iktotchi<br />n: 1\",\"column: species<br />value: Kaleesh<br />n: 1\",\"column: species<br />value: Kaminoan<br />n: 2\",\"column: species<br />value: Kel Dor<br />n: 1\",\"column: species<br />value: Mirialan<br />n: 2\",\"column: species<br />value: Mon Calamari<br />n: 1\",\"column: species<br />value: Muun<br />n: 1\",\"column: species<br />value: Nautolan<br />n: 1\",\"column: species<br />value: Neimodian<br />n: 1\",\"column: species<br />value: Pau'an<br />n: 1\",\"column: species<br />value: Quermian<br />n: 1\",\"column: species<br />value: Rodian<br />n: 1\",\"column: species<br />value: Skakoan<br />n: 1\",\"column: species<br />value: Sullustan<br />n: 1\",\"column: species<br />value: Tholothian<br />n: 1\",\"column: species<br />value: Togruta<br />n: 1\",\"column: species<br />value: Toong<br />n: 1\",\"column: species<br />value: Toydarian<br />n: 1\",\"column: species<br />value: Trandoshan<br />n: 1\",\"column: species<br />value: Twi'lek<br />n: 2\",\"column: species<br />value: Vulptereen<br />n: 1\",\"column: species<br />value: Wookiee<br />n: 2\",\"column: species<br />value: Xexto<br />n: 1\",\"column: species<br />value: Yoda's species<br />n: 1\",\"column: species<br />value: Zabrak<br />n: 2\",\"column: species<br />value: NA<br />n: 4\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 3\",\"column: eye_color<br />value: red, blue<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 3\",\"column: eye_color<br />value: blue<br />n: 12\",\"column: eye_color<br />value: blue-gray<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 16\",\"column: eye_color<br />value: dark<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 2\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: green, yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: gold<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: unknown<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: orange<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: red<br />n: 1\",\"column: eye_color<br />value: hazel<br />n: 1\",\"column: eye_color<br />value: pink<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 2\",\"column: eye_color<br />value: black<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 1\",\"column: eye_color<br />value: yellow<br />n: 1\",\"column: eye_color<br />value: blue<br />n: 1\",\"column: eye_color<br />value: brown<br />n: 2\",\"column: eye_color<br />value: white<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\"],\"sort\":true,\"branchvalues\":\"total\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"type\":\"treemap\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} # display al charchaters by homeworld starwars %>%     count(homeworld, name) %>%     count_to_treemap(sort_by_n = TRUE)  {\"x\":{\"visdat\":{\"17ea26d5e5ac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"17ea26d5e5ac\",\"attrs\":{\"17ea26d5e5ac\":{\"ids\":[\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",\"NA\",\"Alderaan.->.Bail Prestor Organa\",\"Alderaan.->.Leia Organa\",\"Alderaan.->.Raymus Antilles\",\"Aleen Minor.->.Ratts Tyerel\",\"Bespin.->.Lobot\",\"Bestine IV.->.Jek Tono Porkins\",\"Cato Neimoidia.->.Nute Gunray\",\"Cerea.->.Ki-Adi-Mundi\",\"Champala.->.Mas Amedda\",\"Chandrila.->.Mon Mothma\",\"Concord Dawn.->.Jango Fett\",\"Corellia.->.Han Solo\",\"Corellia.->.Wedge Antilles\",\"Coruscant.->.Adi Gallia\",\"Coruscant.->.Finis Valorum\",\"Coruscant.->.Jocasta Nu\",\"Dathomir.->.Darth Maul\",\"Dorin.->.Plo Koon\",\"Endor.->.Wicket Systri Warrick\",\"Eriadu.->.Wilhuff Tarkin\",\"Geonosis.->.Poggle the Lesser\",\"Glee Anselm.->.Kit Fisto\",\"Haruun Kal.->.Mace Windu\",\"Iktotch.->.Saesee Tiin\",\"Iridonia.->.Eeth Koth\",\"Kalee.->.Grievous\",\"Kamino.->.Boba Fett\",\"Kamino.->.Lama Su\",\"Kamino.->.Taun We\",\"Kashyyyk.->.Chewbacca\",\"Kashyyyk.->.Tarfful\",\"Malastare.->.Sebulba\",\"Mirial.->.Barriss Offee\",\"Mirial.->.Luminara Unduli\",\"Mon Cala.->.Ackbar\",\"Muunilinst.->.San Hill\",\"Naboo.->.Cordé\",\"Naboo.->.Dormé\",\"Naboo.->.Gregar Typho\",\"Naboo.->.Jar Jar Binks\",\"Naboo.->.Padmé Amidala\",\"Naboo.->.Palpatine\",\"Naboo.->.Quarsh Panaka\",\"Naboo.->.R2-D2\",\"Naboo.->.Ric Olié\",\"Naboo.->.Roos Tarpals\",\"Naboo.->.Rugor Nass\",\"Nal Hutta.->.Jabba Desilijic Tiure\",\"Ojom.->.Dexter Jettster\",\"Quermia.->.Yarael Poof\",\"Rodia.->.Greedo\",\"Ryloth.->.Ayla Secura\",\"Ryloth.->.Bib Fortuna\",\"Serenno.->.Dooku\",\"Shili.->.Shaak Ti\",\"Skako.->.Wat Tambor\",\"Socorro.->.Lando Calrissian\",\"Stewjon.->.Obi-Wan Kenobi\",\"Sullust.->.Nien Nunb\",\"Tatooine.->.Anakin Skywalker\",\"Tatooine.->.Beru Whitesun Lars\",\"Tatooine.->.Biggs Darklighter\",\"Tatooine.->.C-3PO\",\"Tatooine.->.Cliegg Lars\",\"Tatooine.->.Darth Vader\",\"Tatooine.->.Luke Skywalker\",\"Tatooine.->.Owen Lars\",\"Tatooine.->.R5-D4\",\"Tatooine.->.Shmi Skywalker\",\"Toydaria.->.Watto\",\"Trandosha.->.Bossk\",\"Troiken.->.Gasgano\",\"Tund.->.Ben Quadinaros\",\"Umbara.->.Sly Moore\",\"Utapau.->.Tion Medon\",\"Vulpter.->.Dud Bolt\",\"Zolan.->.Zam Wesell\",\"NA.->.Arvel Crynyd\",\"NA.->.BB8\",\"NA.->.Captain Phasma\",\"NA.->.Finn\",\"NA.->.IG-88\",\"NA.->.Poe Dameron\",\"NA.->.Qui-Gon Jinn\",\"NA.->.R4-P17\",\"NA.->.Rey\",\"NA.->.Yoda\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Alderaan\",\"Alderaan\",\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Corellia\",\"Coruscant\",\"Coruscant\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kamino\",\"Kamino\",\"Kashyyyk\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"labels\":[\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",null,\"Bail Prestor Organa\",\"Leia Organa\",\"Raymus Antilles\",\"Ratts Tyerel\",\"Lobot\",\"Jek Tono Porkins\",\"Nute Gunray\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Mon Mothma\",\"Jango Fett\",\"Han Solo\",\"Wedge Antilles\",\"Adi Gallia\",\"Finis Valorum\",\"Jocasta Nu\",\"Darth Maul\",\"Plo Koon\",\"Wicket Systri Warrick\",\"Wilhuff Tarkin\",\"Poggle the Lesser\",\"Kit Fisto\",\"Mace Windu\",\"Saesee Tiin\",\"Eeth Koth\",\"Grievous\",\"Boba Fett\",\"Lama Su\",\"Taun We\",\"Chewbacca\",\"Tarfful\",\"Sebulba\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Cordé\",\"Dormé\",\"Gregar Typho\",\"Jar Jar Binks\",\"Padmé Amidala\",\"Palpatine\",\"Quarsh Panaka\",\"R2-D2\",\"Ric Olié\",\"Roos Tarpals\",\"Rugor Nass\",\"Jabba Desilijic Tiure\",\"Dexter Jettster\",\"Yarael Poof\",\"Greedo\",\"Ayla Secura\",\"Bib Fortuna\",\"Dooku\",\"Shaak Ti\",\"Wat Tambor\",\"Lando Calrissian\",\"Obi-Wan Kenobi\",\"Nien Nunb\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Biggs Darklighter\",\"C-3PO\",\"Cliegg Lars\",\"Darth Vader\",\"Luke Skywalker\",\"Owen Lars\",\"R5-D4\",\"Shmi Skywalker\",\"Watto\",\"Bossk\",\"Gasgano\",\"Ben Quadinaros\",\"Sly Moore\",\"Tion Medon\",\"Dud Bolt\",\"Zam Wesell\",\"Arvel Crynyd\",\"BB8\",\"Captain Phasma\",\"Finn\",\"IG-88\",\"Poe Dameron\",\"Qui-Gon Jinn\",\"R4-P17\",\"Rey\",\"Yoda\"],\"values\":[3,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,3,2,1,2,1,1,11,1,1,1,1,2,1,1,1,1,1,1,10,1,1,1,1,1,1,1,1,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: homeworld<br />value: Alderaan<br />n: 3\",\"column: homeworld<br />value: Aleen Minor<br />n: 1\",\"column: homeworld<br />value: Bespin<br />n: 1\",\"column: homeworld<br />value: Bestine IV<br />n: 1\",\"column: homeworld<br />value: Cato Neimoidia<br />n: 1\",\"column: homeworld<br />value: Cerea<br />n: 1\",\"column: homeworld<br />value: Champala<br />n: 1\",\"column: homeworld<br />value: Chandrila<br />n: 1\",\"column: homeworld<br />value: Concord Dawn<br />n: 1\",\"column: homeworld<br />value: Corellia<br />n: 2\",\"column: homeworld<br />value: Coruscant<br />n: 3\",\"column: homeworld<br />value: Dathomir<br />n: 1\",\"column: homeworld<br />value: Dorin<br />n: 1\",\"column: homeworld<br />value: Endor<br />n: 1\",\"column: homeworld<br />value: Eriadu<br />n: 1\",\"column: homeworld<br />value: Geonosis<br />n: 1\",\"column: homeworld<br />value: Glee Anselm<br />n: 1\",\"column: homeworld<br />value: Haruun Kal<br />n: 1\",\"column: homeworld<br />value: Iktotch<br />n: 1\",\"column: homeworld<br />value: Iridonia<br />n: 1\",\"column: homeworld<br />value: Kalee<br />n: 1\",\"column: homeworld<br />value: Kamino<br />n: 3\",\"column: homeworld<br />value: Kashyyyk<br />n: 2\",\"column: homeworld<br />value: Malastare<br />n: 1\",\"column: homeworld<br />value: Mirial<br />n: 2\",\"column: homeworld<br />value: Mon Cala<br />n: 1\",\"column: homeworld<br />value: Muunilinst<br />n: 1\",\"column: homeworld<br />value: Naboo<br />n: 11\",\"column: homeworld<br />value: Nal Hutta<br />n: 1\",\"column: homeworld<br />value: Ojom<br />n: 1\",\"column: homeworld<br />value: Quermia<br />n: 1\",\"column: homeworld<br />value: Rodia<br />n: 1\",\"column: homeworld<br />value: Ryloth<br />n: 2\",\"column: homeworld<br />value: Serenno<br />n: 1\",\"column: homeworld<br />value: Shili<br />n: 1\",\"column: homeworld<br />value: Skako<br />n: 1\",\"column: homeworld<br />value: Socorro<br />n: 1\",\"column: homeworld<br />value: Stewjon<br />n: 1\",\"column: homeworld<br />value: Sullust<br />n: 1\",\"column: homeworld<br />value: Tatooine<br />n: 10\",\"column: homeworld<br />value: Toydaria<br />n: 1\",\"column: homeworld<br />value: Trandosha<br />n: 1\",\"column: homeworld<br />value: Troiken<br />n: 1\",\"column: homeworld<br />value: Tund<br />n: 1\",\"column: homeworld<br />value: Umbara<br />n: 1\",\"column: homeworld<br />value: Utapau<br />n: 1\",\"column: homeworld<br />value: Vulpter<br />n: 1\",\"column: homeworld<br />value: Zolan<br />n: 1\",\"column: homeworld<br />value: NA<br />n: 10\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\"],\"sort\":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"branchvalues\":\"total\",\"hoverinfo\":\"text\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"treemap\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"ids\":[\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",\"NA\",\"Alderaan.->.Bail Prestor Organa\",\"Alderaan.->.Leia Organa\",\"Alderaan.->.Raymus Antilles\",\"Aleen Minor.->.Ratts Tyerel\",\"Bespin.->.Lobot\",\"Bestine IV.->.Jek Tono Porkins\",\"Cato Neimoidia.->.Nute Gunray\",\"Cerea.->.Ki-Adi-Mundi\",\"Champala.->.Mas Amedda\",\"Chandrila.->.Mon Mothma\",\"Concord Dawn.->.Jango Fett\",\"Corellia.->.Han Solo\",\"Corellia.->.Wedge Antilles\",\"Coruscant.->.Adi Gallia\",\"Coruscant.->.Finis Valorum\",\"Coruscant.->.Jocasta Nu\",\"Dathomir.->.Darth Maul\",\"Dorin.->.Plo Koon\",\"Endor.->.Wicket Systri Warrick\",\"Eriadu.->.Wilhuff Tarkin\",\"Geonosis.->.Poggle the Lesser\",\"Glee Anselm.->.Kit Fisto\",\"Haruun Kal.->.Mace Windu\",\"Iktotch.->.Saesee Tiin\",\"Iridonia.->.Eeth Koth\",\"Kalee.->.Grievous\",\"Kamino.->.Boba Fett\",\"Kamino.->.Lama Su\",\"Kamino.->.Taun We\",\"Kashyyyk.->.Chewbacca\",\"Kashyyyk.->.Tarfful\",\"Malastare.->.Sebulba\",\"Mirial.->.Barriss Offee\",\"Mirial.->.Luminara Unduli\",\"Mon Cala.->.Ackbar\",\"Muunilinst.->.San Hill\",\"Naboo.->.Cordé\",\"Naboo.->.Dormé\",\"Naboo.->.Gregar Typho\",\"Naboo.->.Jar Jar Binks\",\"Naboo.->.Padmé Amidala\",\"Naboo.->.Palpatine\",\"Naboo.->.Quarsh Panaka\",\"Naboo.->.R2-D2\",\"Naboo.->.Ric Olié\",\"Naboo.->.Roos Tarpals\",\"Naboo.->.Rugor Nass\",\"Nal Hutta.->.Jabba Desilijic Tiure\",\"Ojom.->.Dexter Jettster\",\"Quermia.->.Yarael Poof\",\"Rodia.->.Greedo\",\"Ryloth.->.Ayla Secura\",\"Ryloth.->.Bib Fortuna\",\"Serenno.->.Dooku\",\"Shili.->.Shaak Ti\",\"Skako.->.Wat Tambor\",\"Socorro.->.Lando Calrissian\",\"Stewjon.->.Obi-Wan Kenobi\",\"Sullust.->.Nien Nunb\",\"Tatooine.->.Anakin Skywalker\",\"Tatooine.->.Beru Whitesun Lars\",\"Tatooine.->.Biggs Darklighter\",\"Tatooine.->.C-3PO\",\"Tatooine.->.Cliegg Lars\",\"Tatooine.->.Darth Vader\",\"Tatooine.->.Luke Skywalker\",\"Tatooine.->.Owen Lars\",\"Tatooine.->.R5-D4\",\"Tatooine.->.Shmi Skywalker\",\"Toydaria.->.Watto\",\"Trandosha.->.Bossk\",\"Troiken.->.Gasgano\",\"Tund.->.Ben Quadinaros\",\"Umbara.->.Sly Moore\",\"Utapau.->.Tion Medon\",\"Vulpter.->.Dud Bolt\",\"Zolan.->.Zam Wesell\",\"NA.->.Arvel Crynyd\",\"NA.->.BB8\",\"NA.->.Captain Phasma\",\"NA.->.Finn\",\"NA.->.IG-88\",\"NA.->.Poe Dameron\",\"NA.->.Qui-Gon Jinn\",\"NA.->.R4-P17\",\"NA.->.Rey\",\"NA.->.Yoda\"],\"parents\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Alderaan\",\"Alderaan\",\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Corellia\",\"Coruscant\",\"Coruscant\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kamino\",\"Kamino\",\"Kashyyyk\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"labels\":[\"Alderaan\",\"Aleen Minor\",\"Bespin\",\"Bestine IV\",\"Cato Neimoidia\",\"Cerea\",\"Champala\",\"Chandrila\",\"Concord Dawn\",\"Corellia\",\"Coruscant\",\"Dathomir\",\"Dorin\",\"Endor\",\"Eriadu\",\"Geonosis\",\"Glee Anselm\",\"Haruun Kal\",\"Iktotch\",\"Iridonia\",\"Kalee\",\"Kamino\",\"Kashyyyk\",\"Malastare\",\"Mirial\",\"Mon Cala\",\"Muunilinst\",\"Naboo\",\"Nal Hutta\",\"Ojom\",\"Quermia\",\"Rodia\",\"Ryloth\",\"Serenno\",\"Shili\",\"Skako\",\"Socorro\",\"Stewjon\",\"Sullust\",\"Tatooine\",\"Toydaria\",\"Trandosha\",\"Troiken\",\"Tund\",\"Umbara\",\"Utapau\",\"Vulpter\",\"Zolan\",null,\"Bail Prestor Organa\",\"Leia Organa\",\"Raymus Antilles\",\"Ratts Tyerel\",\"Lobot\",\"Jek Tono Porkins\",\"Nute Gunray\",\"Ki-Adi-Mundi\",\"Mas Amedda\",\"Mon Mothma\",\"Jango Fett\",\"Han Solo\",\"Wedge Antilles\",\"Adi Gallia\",\"Finis Valorum\",\"Jocasta Nu\",\"Darth Maul\",\"Plo Koon\",\"Wicket Systri Warrick\",\"Wilhuff Tarkin\",\"Poggle the Lesser\",\"Kit Fisto\",\"Mace Windu\",\"Saesee Tiin\",\"Eeth Koth\",\"Grievous\",\"Boba Fett\",\"Lama Su\",\"Taun We\",\"Chewbacca\",\"Tarfful\",\"Sebulba\",\"Barriss Offee\",\"Luminara Unduli\",\"Ackbar\",\"San Hill\",\"Cordé\",\"Dormé\",\"Gregar Typho\",\"Jar Jar Binks\",\"Padmé Amidala\",\"Palpatine\",\"Quarsh Panaka\",\"R2-D2\",\"Ric Olié\",\"Roos Tarpals\",\"Rugor Nass\",\"Jabba Desilijic Tiure\",\"Dexter Jettster\",\"Yarael Poof\",\"Greedo\",\"Ayla Secura\",\"Bib Fortuna\",\"Dooku\",\"Shaak Ti\",\"Wat Tambor\",\"Lando Calrissian\",\"Obi-Wan Kenobi\",\"Nien Nunb\",\"Anakin Skywalker\",\"Beru Whitesun Lars\",\"Biggs Darklighter\",\"C-3PO\",\"Cliegg Lars\",\"Darth Vader\",\"Luke Skywalker\",\"Owen Lars\",\"R5-D4\",\"Shmi Skywalker\",\"Watto\",\"Bossk\",\"Gasgano\",\"Ben Quadinaros\",\"Sly Moore\",\"Tion Medon\",\"Dud Bolt\",\"Zam Wesell\",\"Arvel Crynyd\",\"BB8\",\"Captain Phasma\",\"Finn\",\"IG-88\",\"Poe Dameron\",\"Qui-Gon Jinn\",\"R4-P17\",\"Rey\",\"Yoda\"],\"values\":[3,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,3,2,1,2,1,1,11,1,1,1,1,2,1,1,1,1,1,1,10,1,1,1,1,1,1,1,1,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"hovertext\":[\"column: homeworld<br />value: Alderaan<br />n: 3\",\"column: homeworld<br />value: Aleen Minor<br />n: 1\",\"column: homeworld<br />value: Bespin<br />n: 1\",\"column: homeworld<br />value: Bestine IV<br />n: 1\",\"column: homeworld<br />value: Cato Neimoidia<br />n: 1\",\"column: homeworld<br />value: Cerea<br />n: 1\",\"column: homeworld<br />value: Champala<br />n: 1\",\"column: homeworld<br />value: Chandrila<br />n: 1\",\"column: homeworld<br />value: Concord Dawn<br />n: 1\",\"column: homeworld<br />value: Corellia<br />n: 2\",\"column: homeworld<br />value: Coruscant<br />n: 3\",\"column: homeworld<br />value: Dathomir<br />n: 1\",\"column: homeworld<br />value: Dorin<br />n: 1\",\"column: homeworld<br />value: Endor<br />n: 1\",\"column: homeworld<br />value: Eriadu<br />n: 1\",\"column: homeworld<br />value: Geonosis<br />n: 1\",\"column: homeworld<br />value: Glee Anselm<br />n: 1\",\"column: homeworld<br />value: Haruun Kal<br />n: 1\",\"column: homeworld<br />value: Iktotch<br />n: 1\",\"column: homeworld<br />value: Iridonia<br />n: 1\",\"column: homeworld<br />value: Kalee<br />n: 1\",\"column: homeworld<br />value: Kamino<br />n: 3\",\"column: homeworld<br />value: Kashyyyk<br />n: 2\",\"column: homeworld<br />value: Malastare<br />n: 1\",\"column: homeworld<br />value: Mirial<br />n: 2\",\"column: homeworld<br />value: Mon Cala<br />n: 1\",\"column: homeworld<br />value: Muunilinst<br />n: 1\",\"column: homeworld<br />value: Naboo<br />n: 11\",\"column: homeworld<br />value: Nal Hutta<br />n: 1\",\"column: homeworld<br />value: Ojom<br />n: 1\",\"column: homeworld<br />value: Quermia<br />n: 1\",\"column: homeworld<br />value: Rodia<br />n: 1\",\"column: homeworld<br />value: Ryloth<br />n: 2\",\"column: homeworld<br />value: Serenno<br />n: 1\",\"column: homeworld<br />value: Shili<br />n: 1\",\"column: homeworld<br />value: Skako<br />n: 1\",\"column: homeworld<br />value: Socorro<br />n: 1\",\"column: homeworld<br />value: Stewjon<br />n: 1\",\"column: homeworld<br />value: Sullust<br />n: 1\",\"column: homeworld<br />value: Tatooine<br />n: 10\",\"column: homeworld<br />value: Toydaria<br />n: 1\",\"column: homeworld<br />value: Trandosha<br />n: 1\",\"column: homeworld<br />value: Troiken<br />n: 1\",\"column: homeworld<br />value: Tund<br />n: 1\",\"column: homeworld<br />value: Umbara<br />n: 1\",\"column: homeworld<br />value: Utapau<br />n: 1\",\"column: homeworld<br />value: Vulpter<br />n: 1\",\"column: homeworld<br />value: Zolan<br />n: 1\",\"column: homeworld<br />value: NA<br />n: 10\",\"column: name<br />value: Bail Prestor Organa<br />n: 1\",\"column: name<br />value: Leia Organa<br />n: 1\",\"column: name<br />value: Raymus Antilles<br />n: 1\",\"column: name<br />value: Ratts Tyerel<br />n: 1\",\"column: name<br />value: Lobot<br />n: 1\",\"column: name<br />value: Jek Tono Porkins<br />n: 1\",\"column: name<br />value: Nute Gunray<br />n: 1\",\"column: name<br />value: Ki-Adi-Mundi<br />n: 1\",\"column: name<br />value: Mas Amedda<br />n: 1\",\"column: name<br />value: Mon Mothma<br />n: 1\",\"column: name<br />value: Jango Fett<br />n: 1\",\"column: name<br />value: Han Solo<br />n: 1\",\"column: name<br />value: Wedge Antilles<br />n: 1\",\"column: name<br />value: Adi Gallia<br />n: 1\",\"column: name<br />value: Finis Valorum<br />n: 1\",\"column: name<br />value: Jocasta Nu<br />n: 1\",\"column: name<br />value: Darth Maul<br />n: 1\",\"column: name<br />value: Plo Koon<br />n: 1\",\"column: name<br />value: Wicket Systri Warrick<br />n: 1\",\"column: name<br />value: Wilhuff Tarkin<br />n: 1\",\"column: name<br />value: Poggle the Lesser<br />n: 1\",\"column: name<br />value: Kit Fisto<br />n: 1\",\"column: name<br />value: Mace Windu<br />n: 1\",\"column: name<br />value: Saesee Tiin<br />n: 1\",\"column: name<br />value: Eeth Koth<br />n: 1\",\"column: name<br />value: Grievous<br />n: 1\",\"column: name<br />value: Boba Fett<br />n: 1\",\"column: name<br />value: Lama Su<br />n: 1\",\"column: name<br />value: Taun We<br />n: 1\",\"column: name<br />value: Chewbacca<br />n: 1\",\"column: name<br />value: Tarfful<br />n: 1\",\"column: name<br />value: Sebulba<br />n: 1\",\"column: name<br />value: Barriss Offee<br />n: 1\",\"column: name<br />value: Luminara Unduli<br />n: 1\",\"column: name<br />value: Ackbar<br />n: 1\",\"column: name<br />value: San Hill<br />n: 1\",\"column: name<br />value: Cordé<br />n: 1\",\"column: name<br />value: Dormé<br />n: 1\",\"column: name<br />value: Gregar Typho<br />n: 1\",\"column: name<br />value: Jar Jar Binks<br />n: 1\",\"column: name<br />value: Padmé Amidala<br />n: 1\",\"column: name<br />value: Palpatine<br />n: 1\",\"column: name<br />value: Quarsh Panaka<br />n: 1\",\"column: name<br />value: R2-D2<br />n: 1\",\"column: name<br />value: Ric Olié<br />n: 1\",\"column: name<br />value: Roos Tarpals<br />n: 1\",\"column: name<br />value: Rugor Nass<br />n: 1\",\"column: name<br />value: Jabba Desilijic Tiure<br />n: 1\",\"column: name<br />value: Dexter Jettster<br />n: 1\",\"column: name<br />value: Yarael Poof<br />n: 1\",\"column: name<br />value: Greedo<br />n: 1\",\"column: name<br />value: Ayla Secura<br />n: 1\",\"column: name<br />value: Bib Fortuna<br />n: 1\",\"column: name<br />value: Dooku<br />n: 1\",\"column: name<br />value: Shaak Ti<br />n: 1\",\"column: name<br />value: Wat Tambor<br />n: 1\",\"column: name<br />value: Lando Calrissian<br />n: 1\",\"column: name<br />value: Obi-Wan Kenobi<br />n: 1\",\"column: name<br />value: Nien Nunb<br />n: 1\",\"column: name<br />value: Anakin Skywalker<br />n: 1\",\"column: name<br />value: Beru Whitesun Lars<br />n: 1\",\"column: name<br />value: Biggs Darklighter<br />n: 1\",\"column: name<br />value: C-3PO<br />n: 1\",\"column: name<br />value: Cliegg Lars<br />n: 1\",\"column: name<br />value: Darth Vader<br />n: 1\",\"column: name<br />value: Luke Skywalker<br />n: 1\",\"column: name<br />value: Owen Lars<br />n: 1\",\"column: name<br />value: R5-D4<br />n: 1\",\"column: name<br />value: Shmi Skywalker<br />n: 1\",\"column: name<br />value: Watto<br />n: 1\",\"column: name<br />value: Bossk<br />n: 1\",\"column: name<br />value: Gasgano<br />n: 1\",\"column: name<br />value: Ben Quadinaros<br />n: 1\",\"column: name<br />value: Sly Moore<br />n: 1\",\"column: name<br />value: Tion Medon<br />n: 1\",\"column: name<br />value: Dud Bolt<br />n: 1\",\"column: name<br />value: Zam Wesell<br />n: 1\",\"column: name<br />value: Arvel Crynyd<br />n: 1\",\"column: name<br />value: BB8<br />n: 1\",\"column: name<br />value: Captain Phasma<br />n: 1\",\"column: name<br />value: Finn<br />n: 1\",\"column: name<br />value: IG-88<br />n: 1\",\"column: name<br />value: Poe Dameron<br />n: 1\",\"column: name<br />value: Qui-Gon Jinn<br />n: 1\",\"column: name<br />value: R4-P17<br />n: 1\",\"column: name<br />value: Rey<br />n: 1\",\"column: name<br />value: Yoda<br />n: 1\"],\"sort\":true,\"branchvalues\":\"total\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"type\":\"treemap\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_all_col_params.html","id":null,"dir":"Reference","previous_headings":"","what":"create_all_col_params — create_all_col_params","title":"create_all_col_params — create_all_col_params","text":"create_all_col_params","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_all_col_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_all_col_params — create_all_col_params","text":"","code":"create_all_col_params(count_data, fill_by_n, sort_by_n)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_all_col_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_all_col_params — create_all_col_params","text":"sort_by_n","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_lineage_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a look up table that goes from TaxID, to Lineage — create_lineage_lookup","title":"Create a look up table that goes from TaxID, to Lineage — create_lineage_lookup","text":"Create look table goes TaxID, Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_lineage_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a look up table that goes from TaxID, to Lineage — create_lineage_lookup","text":"","code":"create_lineage_lookup(   lineage_file = here(\"data/rankedlineage.dmp\"),   outfile,   taxonomic_rank = \"phylum\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_lineage_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a look up table that goes from TaxID, to Lineage — create_lineage_lookup","text":"lineage_file Path rankedlineage.dmp file containing taxid's corresponding taxonomic rank. rankedlineage.dmp can downloaded https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/ outfile File resulting lineage lookup table written taxonomic_rank upperbound taxonomic rank lineage includes. lineaege include superkingdom>...>taxonomic_rank. Choices include: \"supperkingdom\", \"phylum\",   \"class\",\"order\", \"family\", \"genus\", \"species\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_lineage_lookup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a look up table that goes from TaxID, to Lineage — create_lineage_lookup","text":"Samuel Chen","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_one_col_params.html","id":null,"dir":"Reference","previous_headings":"","what":"create_one_col_params — create_one_col_params","title":"create_one_col_params — create_one_col_params","text":"create_one_col_params","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_one_col_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_one_col_params — create_one_col_params","text":"","code":"create_one_col_params(df, col_num, root)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/create_one_col_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_one_col_params — create_one_col_params","text":"root","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/df_iprscan_domains2fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","title":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","text":"Using table returned make_df_iprscan_domains, construct domain fasta single accession number original fasta (.e., original fasta argument make_df_iprscan_domains())","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/df_iprscan_domains2fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","text":"","code":"df_iprscan_domains2fasta(df_iprscan_domains)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/df_iprscan_domains2fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","text":"df_iprscan_domains tbl_df return value make_df_iprscan_domains","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/df_iprscan_domains2fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","text":"AAStringSet domain fasta containing domains single protein original fasta passed argument make_df_iprscan_domains()","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/df_iprscan_domains2fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Using the table returned from make_df_iprscan_domains, construct a domain fasta for a single accession number in the original fasta (i.e., the original fasta argument to make_df_iprscan_domains()) — df_iprscan_domains2fasta","text":"","code":"if (FALSE) { # \\dontrun{ path_molevol_scripts <- file.path(Sys.getenv(\"DEV\", unset = \"/data/molevolvr_transfer/molevolvr_dev\"), \"molevol_scripts\") setwd(path_molevol_scripts) source(\"R/fa2domain.R\") fasta <- Biostrings::readAAStringSet(\"./tests/example_protein.fa\") df_iprscan <- read_iprscan_tsv(\"./tests/example_iprscan_valid.tsv\") accnum <- df_iprscan$AccNum[1] df_iprscan_domains <- make_df_iprscan_domains(accnum, fasta, df_iprscan) fasta_domains <- df_iprscan_domains |> df_iprscan_domains2fasta() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/domain_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Network — domain_network","title":"Domain Network — domain_network","text":"function creates domain network 'DomArch' column. network domains returned based shared domain architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/domain_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Network — domain_network","text":"","code":"domain_network(   prot,   column = \"DomArch\",   domains_of_interest,   cutoff = 70,   layout = \"nice\",   query_color = adjustcolor(\"green\", alpha.f = 0.5) )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/domain_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Network — domain_network","text":"prot data frame contains column 'DomArch'. column Name column containing Domain architecture nodes edges generated. cutoff Integer. use domains occur cutoff total counts cutoff_type \"Total Count\". use domains appear cutoff greater lineages cutoff_type Lineage. layout Character. Layout type used network. Options : \"circle\" \"random\" \"auto\" query_color","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/domain_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Network — domain_network","text":"","code":"if (FALSE) { # \\dontrun{ domain_network(pspa) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":null,"dir":"Reference","previous_headings":"","what":"efetch_ipg — efetch_ipg","title":"efetch_ipg — efetch_ipg","text":"Perform efetch ipg database write results out_path Perform efetch ipg database write results out_path","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"efetch_ipg — efetch_ipg","text":"","code":"efetch_ipg(accessions, out_path, plan = \"multicore\")  efetch_ipg(accessions, out_path, plan = \"multicore\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"efetch_ipg — efetch_ipg","text":"accessions Character vector containing accession numbers query ipg database out_path Path write efetch results plan  accnums Character vector containing accession numbers query ipg database","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"efetch_ipg — efetch_ipg","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"efetch_ipg — efetch_ipg","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/efetch_ipg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"efetch_ipg — efetch_ipg","text":"","code":"if (FALSE) { # \\dontrun{ efetch_ipg() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/elements2words.html","id":null,"dir":"Reference","previous_headings":"","what":"Elements 2 Words — elements2words","title":"Elements 2 Words — elements2words","text":"Break string ELEMENTS WORDS domain architecture (DA) genomic context (GC)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/elements2words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elements 2 Words — elements2words","text":"","code":"elements2words(prot, column = \"DomArch\", conversion_type = \"da2doms\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/elements2words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elements 2 Words — elements2words","text":"prot dataframe column string column name conversion_type string type conversion: 'da2doms': domain architectures domains. 'gc2da' genomic context domain architectures","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/elements2words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elements 2 Words — elements2words","text":"string words delimited spaces","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/elements2words.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elements 2 Words — elements2words","text":"","code":"if (FALSE) { # \\dontrun{ tibble::tibble(DomArch = c(\"aaa+bbb\", \"a+b\", \"b+c\", \"b-c\")) |> elements2words() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/exec_interproscan.html","id":null,"dir":"Reference","previous_headings":"","what":"exec_interproscan — exec_interproscan","title":"exec_interproscan — exec_interproscan","text":"exec_interproscan","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/exec_interproscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exec_interproscan — exec_interproscan","text":"","code":"exec_interproscan(filepath_fasta, filepath_out, appl = c(\"Pfam\", \"Gene3D\"))"},{"path":"https://jravilab.github.io/MolEvolvR/reference/exec_interproscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exec_interproscan — exec_interproscan","text":"appl","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/fasta2fasta_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"fasta2fasta_domain — fasta2fasta_domain","title":"fasta2fasta_domain — fasta2fasta_domain","text":"fasta2fasta_domain","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/fasta2fasta_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fasta2fasta_domain — fasta2fasta_domain","text":"","code":"fasta2fasta_domain(   fasta,   df_iprscan,   analysis = c(\"Pfam\", \"Gene3D\"),   verbose = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/fasta2fasta_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fasta2fasta_domain — fasta2fasta_domain","text":"fasta AAStringSet protein (AA) fasta df_iprscan tbl_df interproscan results original fasta analysis chr domain databases extract sequences ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/fasta2fasta_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fasta2fasta_domain — fasta2fasta_domain","text":"fasta_domains AAStringSet fasta domains","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/fasta2fasta_domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fasta2fasta_domain — fasta2fasta_domain","text":"","code":"if (FALSE) { # \\dontrun{ path_molevol_scripts <- file.path(Sys.getenv(\"DEV\", unset = \"/data/molevolvr_transfer/molevolvr_dev\"), \"molevol_scripts\") setwd(path_molevol_scripts) source(\"R/fa2domain.R\") fasta <- Biostrings::readAAStringSet(\"./tests/example_protein.fa\") df_iprscan <- read_iprscan_tsv(\"./tests/example_iprscan_valid.tsv\") fasta2fasta_domain(fasta, df_iprscan) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by Domains — filter_by_doms","title":"Filter by Domains — filter_by_doms","text":"filter_by_doms filters data frame identifying exact domain matches either keeping removing rows identified domain","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by Domains — filter_by_doms","text":"","code":"filter_by_doms(   prot,   column = \"DomArch\",   doms_keep = c(),   doms_remove = c(),   ignore.case = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by Domains — filter_by_doms","text":"prot Dataframe filter column Column search domains (DomArch column) doms_keep Vector domains must identified within column order observation kept doms_remove Vector domains , found within observation, removed ignore.case matching non case sensitive","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by Domains — filter_by_doms","text":"Filtered data frame","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter by Domains — filter_by_doms","text":"need make domains 'regex safe', handled function","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter by Domains — filter_by_doms","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_by_doms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by Domains — filter_by_doms","text":"","code":"if (FALSE) { # \\dontrun{ filter_by_doms() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Frequency — filter_freq","title":"Filter Frequency — filter_freq","text":"Filter Frequency","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Frequency — filter_freq","text":"","code":"filter_freq(x, min.freq)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Frequency — filter_freq","text":"min.freq","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Frequency — filter_freq","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/filter_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Frequency — filter_freq","text":"","code":"if (FALSE) { # \\dontrun{ filter_freq() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Paralogs — find_paralogs","title":"Find Paralogs — find_paralogs","text":"Creates data frame paralogs.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Paralogs — find_paralogs","text":"","code":"find_paralogs(prot)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Paralogs — find_paralogs","text":"prot data frame filtered Query, containing columns Species Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Paralogs — find_paralogs","text":"returns dataframe containing paralogs counts.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find Paralogs — find_paralogs","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_paralogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Paralogs — find_paralogs","text":"","code":"if (FALSE) { # \\dontrun{ find_paralogs(pspa) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_top_acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by lineage + DA then take top 20 — find_top_acc","title":"Group by lineage + DA then take top 20 — find_top_acc","text":"Group lineage + DA take top 20","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_top_acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by lineage + DA then take top 20 — find_top_acc","text":"","code":"find_top_acc(   infile_full,   DA_col = \"DomArch.Pfam\",   lin_col = \"Lineage_short\",   n = 20,   query )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/find_top_acc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by lineage + DA then take top 20 — find_top_acc","text":"query","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/format_job_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","title":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","text":"Format job arguments html-formatted key/value pairs, including email","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/format_job_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","text":"","code":"format_job_args(job_args)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/format_job_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","text":"job_args list job arguments, e.g. read job_args.yml file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/format_job_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","text":"list HTML-formatted key/value pairs","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/format_job_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format job arguments into html-formatted key/value pairs, for including in an email — format_job_args","text":"","code":"if (FALSE) { # \\dontrun{ format_job_args(\"/data/scratch/janani/molevolvr_out/Ba5sV1_full\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/gc_undirected_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Network — gc_undirected_network","title":"Domain Network — gc_undirected_network","text":"function creates domain network 'DomArch' column. network domains returned based shared domain architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/gc_undirected_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Network — gc_undirected_network","text":"","code":"gc_undirected_network(   prot,   column = \"GenContext\",   domains_of_interest,   cutoff_type = \"Lineage\",   cutoff = 1,   layout = \"grid\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/gc_undirected_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Network — gc_undirected_network","text":"prot data frame contains column 'DomArch'. column Name column containing Domain architecture nodes edges generated. cutoff_type Character. Used determine data filtered. Either \"Total Count\" filter total amount times domain architecture occurs cutoff Integer. use domains occur cutoff total counts cutoff_type \"Total Count\". use domains appear cutoff greater lineages cutoff_type Lineage. layout Character. Layout type used network. Options : \"circle\" \"random\" \"auto\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/gc_undirected_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Network — gc_undirected_network","text":"","code":"if (FALSE) { # \\dontrun{ domain_network(pspa) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"Adding Leaves alignment files w/ accessions & DAs? Adding Leaves alignment files w/ accessions & DAs?","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"","code":"generate_all_aln2fa(   aln_path = here(\"data/rawdata_aln/\"),   fa_outpath = here(\"data/alns/\"),   lin_file = here(\"data/rawdata_tsv/all_semiclean.txt\"),   reduced = F )  generate_all_aln2fa(   aln_path = here(\"data/rawdata_aln/\"),   fa_outpath = here(\"data/alns/\"),   lin_file = here(\"data/rawdata_tsv/all_semiclean.txt\"),   reduced = F )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"aln_path Character. Path alignment files. Default '(\"data/rawdata_aln/\")' fa_outpath Character. Path written fasta file. Default '(\"data/alns/\")'. lin_file Character. Path file. Master protein file AccNum & lineages. Default '(\"data/rawdata_tsv/all_semiclean.txt\")' reduced Boolean. TRUE, fasta file contain one sequence per lineage. Default 'FALSE'.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"alignment files need two columns separated spaces: 1. AccNum 2. alignment. protein homolog file AccNum, Species, Lineages. alignment files need two columns separated spaces: 1. AccNum 2. alignment. protein homolog file AccNum, Species, Lineages.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"Please refer source code alternate + file formats /column names. Please refer source code alternate + file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_all_aln2fa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding Leaves to an alignment file w/ accessions — generate_all_aln2fa","text":"","code":"if (FALSE) { # \\dontrun{ generate_all_aln2fa() } # } if (FALSE) { # \\dontrun{ generate_all_aln2fa() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_fa2tre — generate_fa2tre","title":"generate_fa2tre — generate_fa2tre","text":"Generating phylogenetic tree alignment file '.fa'","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_fa2tre — generate_fa2tre","text":"","code":"generate_fa2tre(   fa_file = \"data/alns/pspa_snf7.fa\",   out_file = \"data/alns/pspa_snf7.tre\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_fa2tre — generate_fa2tre","text":"fa_file Character. Path file. Default 'pspa_snf7.fa' out_file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generate_fa2tre — generate_fa2tre","text":"alignment file need two columns: 1. accession + number 2. alignment. protein homolog accession lineage mapping + file ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"generate_fa2tre — generate_fa2tre","text":"Please refer source code alternate + file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"generate_fa2tre — generate_fa2tre","text":"Janani Ravi, MolEcologist","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_fa2tre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate_fa2tre — generate_fa2tre","text":"","code":"if (FALSE) { # \\dontrun{ generate_aln2tree(\"pspa_snf7.fa\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_msa.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate MSA using kalign — generate_msa","title":"Function to generate MSA using kalign — generate_msa","text":"Function generate MSA using kalign","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_msa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate MSA using kalign — generate_msa","text":"","code":"generate_msa(fa_file = \"\", outfile = \"\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_msa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate MSA using kalign — generate_msa","text":"outfile","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_trees — generate_trees","title":"generate_trees — generate_trees","text":"Generate Trees fasta files \"data/alns\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_trees — generate_trees","text":"","code":"generate_trees(aln_path = here(\"data/alns/\"))"},{"path":"https://jravilab.github.io/MolEvolvR/reference/generate_trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_trees — generate_trees","text":"aln_path","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_accnums_from_fasta_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get accnums from fasta file — get_accnums_from_fasta_file","title":"Get accnums from fasta file — get_accnums_from_fasta_file","text":"Get accnums fasta file get_accnums_from_fasta_file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_accnums_from_fasta_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get accnums from fasta file — get_accnums_from_fasta_file","text":"","code":"get_accnums_from_fasta_file(fasta_file)  get_accnums_from_fasta_file(fasta_file)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_accnums_from_fasta_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get accnums from fasta file — get_accnums_from_fasta_file","text":"fasta_file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for interproscan column names (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_names","title":"Constructor function for interproscan column names (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_names","text":"Constructor function interproscan column names (based upon global variable written molevol_scripts/R/colnames_molevol.R)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for interproscan column names (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_names","text":"","code":"get_df_ipr_col_names()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for interproscan column names (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_names","text":"chr interproscan column names used throughout molevolvr","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_types.html","id":null,"dir":"Reference","previous_headings":"","what":"construct column types for reading interproscan output TSVs (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_types","title":"construct column types for reading interproscan output TSVs (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_types","text":"construct column types reading interproscan output TSVs (based upon global variable written molevol_scripts/R/colnames_molevol.R)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct column types for reading interproscan output TSVs (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_types","text":"","code":"get_df_ipr_col_types()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_df_ipr_col_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct column types for reading interproscan output TSVs (based upon the global variable written in molevol_scripts/R/colnames_molevol.R) — get_df_ipr_col_types","text":"collector named vector type expecatations interproscan columns","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_job_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces a mail message that can be sent to a user when their job is accepted. Used by the send_job_status_email() method. — get_job_message","title":"Produces a mail message that can be sent to a user when their job is accepted. Used by the send_job_status_email() method. — get_job_message","text":"Produces mail message can sent user job accepted. Used send_job_status_email() method.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_job_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces a mail message that can be sent to a user when their job is accepted. Used by the send_job_status_email() method. — get_job_message","text":"","code":"get_job_message(job_dir, pin_id, job_results_url, event_type, context)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_job_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces a mail message that can be sent to a user when their job is accepted. Used by the send_job_status_email() method. — get_job_message","text":"job_dir directory job's arguments stored, job_args.yml pin_id unique identifier job job_results_url URL user can check status job event_type either 'start' 'end', returns corresponding email given type context list additional values, e.g. job runtime info, can used template emails","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_job_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces a mail message that can be sent to a user when their job is accepted. Used by the send_job_status_email() method. — get_job_message","text":"result sendmailR::sendmail() call","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_medians.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape MolEvolvR logs and calculate median processes — get_proc_medians","title":"Scrape MolEvolvR logs and calculate median processes — get_proc_medians","text":"Scrape MolEvolvR logs calculate median processes","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_medians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape MolEvolvR logs and calculate median processes — get_proc_medians","text":"","code":"get_proc_medians(dir_job_results)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_medians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape MolEvolvR logs and calculate median processes — get_proc_medians","text":"dir_job_results chr path MolEvolvR job_results directory","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_medians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape MolEvolvR logs and calculate median processes — get_proc_medians","text":"list names: processes; values: median runtime (seconds) see molevol_scripts/R/metrics.R info functions called examples:  dir_job_results <- \"/data/scratch/janani/molevolvr_out\" list_proc_medians <- get_proc_medians(dir_job_results) outside container environment common_root <- \"/data/molevolvr_transfer/molevolvr_dev\" dir_job_results <- \"/data/molevolvr_transfer/molevolvr_dev/job_results\" list_proc_medians <- get_proc_medians(dir_job_results)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly get the runtime weights for MolEvolvR backend processes — get_proc_weights","title":"Quickly get the runtime weights for MolEvolvR backend processes — get_proc_weights","text":"Quickly get runtime weights MolEvolvR backend processes","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly get the runtime weights for MolEvolvR backend processes — get_proc_weights","text":"","code":"get_proc_weights(medians_yml_path = NULL)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly get the runtime weights for MolEvolvR backend processes — get_proc_weights","text":"dir_job_results chr path MolEvolvR job_results directory","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/get_proc_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly get the runtime weights for MolEvolvR backend processes — get_proc_weights","text":"list names: processes; values: median runtime (seconds) example: get_proc_weights()","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":null,"dir":"Reference","previous_headings":"","what":"ipg2lin — ipg2lin","title":"ipg2lin — ipg2lin","text":"Takes resulting file efetch run ipg database Takes resulting file efetch run ipg database append lineage, taxid columns","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ipg2lin — ipg2lin","text":"","code":"ipg2lin(   accessions,   ipg_file,   refseq_assembly_path,   genbank_assembly_path,   lineagelookup_path )  ipg2lin(   accessions,   ipg_file,   refseq_assembly_path,   genbank_assembly_path,   lineagelookup_path )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ipg2lin — ipg2lin","text":"accessions Character vector protein accessions ipg_file Path file containing results efetch run ipg database. protein accession 'accessions' contained file lineagelookup_path String path lineage lookup file (taxid lineage mapping). file can generated using \"create_lineage_lookup()\" function assembly_path String path assembly_summary path file can generated using \"DownloadAssemblySummary()\" function","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ipg2lin — ipg2lin","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ipg2lin — ipg2lin","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipg2lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ipg2lin — ipg2lin","text":"","code":"if (FALSE) { # \\dontrun{ ipg2lin() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz.html","id":null,"dir":"Reference","previous_headings":"","what":"IPR2Viz — ipr2viz","title":"IPR2Viz — ipr2viz","text":"IPR2Viz","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPR2Viz — ipr2viz","text":"","code":"ipr2viz(   infile_ipr = NULL,   infile_full = NULL,   accessions = c(),   analysis = c(\"Pfam\", \"Phobius\", \"TMHMM\", \"Gene3D\"),   group_by = \"Analysis\",   topn = 20,   name = \"Name\",   text_size = 15,   query = \"All\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPR2Viz — ipr2viz","text":"query","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz_web.html","id":null,"dir":"Reference","previous_headings":"","what":"IPR2Viz Web — ipr2viz_web","title":"IPR2Viz Web — ipr2viz_web","text":"IPR2Viz Web","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz_web.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPR2Viz Web — ipr2viz_web","text":"","code":"ipr2viz_web(   infile_ipr,   accessions,   analysis = c(\"Pfam\", \"Phobius\", \"TMHMM\", \"Gene3D\"),   group_by = \"Analysis\",   name = \"Name\",   text_size = 15,   legend_name = \"ShortName\",   cols = 5,   rows = 10 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/ipr2viz_web.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPR2Viz Web — ipr2viz_web","text":"rows","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"Lineage plot Domains, Domain Architectures Genomic Contexts. Heatmap.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"","code":"lineage.DA.plot(   query_data = \"prot\",   colname = \"DomArch\",   cutoff = 90,   RowsCutoff = FALSE,   color = \"default\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default prot (variable w/ protein data). colname Column name query_data: \"DomArch.norep\", \"GenContext.norep\", \"DomArch.PFAM.norep\" \"DomArch.LADB.norep\". Default \"DomArch.norep\". color Color heatmap. One six options: \"default\", \"magma\", \"inferno\", \"plasma\", \"viridis\", \"cividis\"","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"\"da2doms\" need file DA.doms.wc well column query_data$DomArch.norep \"gc2da\", need file GC.DA.wc well column query_data$GenContext.norep","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.DA.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineage Plot: Heatmap of Domains/DAs/GCs vs Lineages — lineage.DA.plot","text":"","code":"if (FALSE) { # \\dontrun{ lineage.DA.plot(toast_rack_data, 10, \"DomArch.norep\", \"da2doms\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.Query.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","title":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","text":"Lineage plot queries. Heatmap.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.Query.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","text":"","code":"lineage.Query.plot(   query_data = all,   queries,   colname = \"ClustName\",   cutoff,   color = \"default\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.Query.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default prot (variable w/ protein data). queries Character Vector containing queries used categories color","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.Query.plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.Query.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineage Plot: Heatmap of Queries vs Lineages — lineage.Query.plot","text":"","code":"if (FALSE) { # \\dontrun{ lineage.Query.plot(prot, c(\"PspA\", \"PspB\", \"PspC\", \"PspM\", \"PspN\"), 95) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.domain_repeats.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage Domain Repeats Plot — lineage.domain_repeats.plot","title":"Lineage Domain Repeats Plot — lineage.domain_repeats.plot","text":"Lineage Domain Repeats Plot","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.domain_repeats.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage Domain Repeats Plot — lineage.domain_repeats.plot","text":"","code":"lineage.domain_repeats.plot(query_data, colname)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.domain_repeats.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage Domain Repeats Plot — lineage.domain_repeats.plot","text":"colname","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.domain_repeats.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineage Domain Repeats Plot — lineage.domain_repeats.plot","text":"","code":"if (FALSE) { # \\dontrun{ lineage.domain_repeats.plot() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage Plot for top neighbors — lineage.neighbors.plot","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"Lineage plot top neighbors obtained DAs Genomic Contexts.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"","code":"lineage.neighbors.plot(   query_data = \"prot\",   query = \"pspa\",   colname = \"GenContext.norep\" )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default pspa_data. query Name query protein/domain. Default \"pspa\". colname Column name query_data. Default \"GenContext.norep\".","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"\"da2doms\" need file DA.doms.wc well column query_data$DomArch.norep \"gc2da\", need file GC.DA.wc well column query_data$GenContext.norep","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage.neighbors.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineage Plot for top neighbors — lineage.neighbors.plot","text":"","code":"if (FALSE) { # \\dontrun{ lineage.neighbors.plot(pspa_data, pspa, \"GenContext.norep\", \"da2doms\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage_sunburst.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage Sunburst — lineage_sunburst","title":"Lineage Sunburst — lineage_sunburst","text":"Lineage Sunburst","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage_sunburst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage Sunburst — lineage_sunburst","text":"","code":"lineage_sunburst(   prot,   lineage_column = \"Lineage\",   type = \"sunburst\",   levels = 2,   colors = NULL,   legendOrder = NULL,   showLegend = TRUE,   maxLevels = 5 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage_sunburst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage Sunburst — lineage_sunburst","text":"prot Data frame containing lineage column sunburst plot generated lineage_column String. Name lineage column within data frame. Defaults \"Lineage\" type String, either \"sunburst\" \"sund2b\". type \"sunburst\", sunburst plot lineage levels Integer. Number levels sunburst . legendOrder String vector. order legend. legendOrder NULL, showLegend Boolean. TRUE, legend enabled component first renders. maxLevels Integer, maximum number levels display sunburst; 5 default, NULL disable legend descending order top level hierarchy. rendered. type sund2b, sund2b plot rendered.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/lineage_sunburst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineage Sunburst — lineage_sunburst","text":"","code":"if (FALSE) { # \\dontrun{ lineage_sunburst() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_accnums_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"make accnums unique — make_accnums_unique","title":"make accnums unique — make_accnums_unique","text":"Append index occurence suffix accession number (character vector) making unique","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_accnums_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make accnums unique — make_accnums_unique","text":"","code":"make_accnums_unique(accnums)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_accnums_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make accnums unique — make_accnums_unique","text":"accnums chr vector accession numbers","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_accnums_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make accnums unique — make_accnums_unique","text":"chr vector adjusted, unique accession numbers","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_accnums_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make accnums unique — make_accnums_unique","text":"","code":"if (FALSE) { # \\dontrun{ c(\"xxx\", \"xxx\", \"xxx\", \"yyy\", \"yyy\") |>     make_accnums_unique() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_df_iprscan_domains.html","id":null,"dir":"Reference","previous_headings":"","what":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","title":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","text":"given accession number, get domain sequences using interproscan output table & original FASTA file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_df_iprscan_domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","text":"","code":"make_df_iprscan_domains(   accnum,   fasta,   df_iprscan,   analysis = c(\"Pfam\", \"Gene3D\") )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_df_iprscan_domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","text":"accnum chr single accession number original fasta (fasta param) used search sequence's domains (df_iprscan param) fasta AAStringSet original fasta file fed interproscan df_iprscan tbl_df output TSV interproscan, read tibble read_iprscan_tsv() analysis chr domain databases extract sequences ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_df_iprscan_domains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","text":"tbl_df table domain sequence new identifier column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_df_iprscan_domains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For a given accession number, get the domain sequences using a interproscan output table & the original FASTA file — make_df_iprscan_domains","text":"","code":"if (FALSE) { # \\dontrun{ path_molevol_scripts <- file.path(Sys.getenv(\"DEV\", unset = \"/data/molevolvr_transfer/molevolvr_dev\"), \"molevol_scripts\") setwd(path_molevol_scripts) source(\"R/fa2domain.R\") fasta <- Biostrings::readAAStringSet(\"./tests/example_protein.fa\") df_iprscan <- read_iprscan_tsv(\"./tests/example_iprscan_valid.tsv\") accnum <- df_iprscan$AccNum[1] df_iprscan_domains <- make_df_iprscan_domains(accnum, fasta, df_iprscan) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_job_results_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a pin_id, returns the URL where the user can check the status of their job — make_job_results_url","title":"Given a pin_id, returns the URL where the user can check the status of their job — make_job_results_url","text":"'base_url' parameter set environment variable 'BASE_URL' available, defaults \"http://jravilab.org/molevolvr/\" .","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_job_results_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a pin_id, returns the URL where the user can check the status of their job — make_job_results_url","text":"","code":"make_job_results_url(   pin_id,   base_url = Sys.getenv(\"BASE_URL\", unset = \"http://jravilab.org/molevolvr/\") )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_job_results_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a pin_id, returns the URL where the user can check the status of their job — make_job_results_url","text":"pin_id unique identifier job base_url base URL MolEvolvR web app","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_job_results_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a pin_id, returns the URL where the user can check the status of their job — make_job_results_url","text":"URL user can check status job","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_opts2procs.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct list where names (MolEvolvR advanced options) point to processes — make_opts2procs","title":"Construct list where names (MolEvolvR advanced options) point to processes — make_opts2procs","text":"Construct list names (MolEvolvR advanced options) point processes","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_opts2procs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct list where names (MolEvolvR advanced options) point to processes — make_opts2procs","text":"","code":"make_opts2procs()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/make_opts2procs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct list where names (MolEvolvR advanced options) point to processes — make_opts2procs","text":"list names (MolEvolvR advanced options) point processes example: list_opts2procs <- make_opts2procs","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_acc2name.html","id":null,"dir":"Reference","previous_headings":"","what":"Default rename_fasta() replacement function. Maps an accession number to its name — map_acc2name","title":"Default rename_fasta() replacement function. Maps an accession number to its name — map_acc2name","text":"Default rename_fasta() replacement function. Maps accession number name Default rename_fasta() replacement function. Maps accession number name","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_acc2name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default rename_fasta() replacement function. Maps an accession number to its name — map_acc2name","text":"","code":"map_acc2name(line, acc2name, acc_col = \"AccNum\", name_col = \"Name\")  map_acc2name(line, acc2name, acc_col = \"AccNum\", name_col = \"Name\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_acc2name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default rename_fasta() replacement function. Maps an accession number to its name — map_acc2name","text":"line line fasta file starting '>' acc2name Data Table containing column accession numbers name column acc_col Name column containing Accession numbers name_col Name column containing names accession numbers mapped ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_advanced_opts2procs.html","id":null,"dir":"Reference","previous_headings":"","what":"Use MolEvolvR advanced options to get associated processes — map_advanced_opts2procs","title":"Use MolEvolvR advanced options to get associated processes — map_advanced_opts2procs","text":"Use MolEvolvR advanced options get associated processes","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_advanced_opts2procs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use MolEvolvR advanced options to get associated processes — map_advanced_opts2procs","text":"","code":"map_advanced_opts2procs(advanced_opts)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_advanced_opts2procs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use MolEvolvR advanced options to get associated processes — map_advanced_opts2procs","text":"advanced_opts character vector MolEvolvR advanced options","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/map_advanced_opts2procs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use MolEvolvR advanced options to get associated processes — map_advanced_opts2procs","text":"character vector process names execute given advanced options example: advanced_opts <- c(\"homology_search\", \"domain_architecture\") procs <- map_advanced_opts2procs(advanced_opts)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/msa_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Sequence Alignment — msa_pdf","title":"Multiple Sequence Alignment — msa_pdf","text":"Generates multiple sequence alignment fasta file msa_pdf function reads fasta file generates multiple sequence alignment pdf","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/msa_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Sequence Alignment — msa_pdf","text":"","code":"msa_pdf(fasta_path, out_path = NULL, lowerbound = NULL, upperbound = NULL)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/msa_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple Sequence Alignment — msa_pdf","text":"fasta_path Character. path location fasta file read. out_path Character. path location output pdf write. Default NULL. value NULL, pdf written directory fasta file. lowerbound Numeric. column determines starting location MSA. Default NULL. value NULL, entire multiple sequence alignment printed. upperbound Numeric. column determines ending location MSA. Default NULL. value NULL, entire multiple sequence alignment printed.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/msa_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple Sequence Alignment — msa_pdf","text":"","code":"if (FALSE) { # \\dontrun{ msa_pdf() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/pick_longer_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick Longer Duplicate — pick_longer_duplicate","title":"Pick Longer Duplicate — pick_longer_duplicate","text":"Pick Longer Duplicate","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/pick_longer_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick Longer Duplicate — pick_longer_duplicate","text":"","code":"pick_longer_duplicate(prot, column)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/pick_longer_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick Longer Duplicate — pick_longer_duplicate","text":"column","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/pick_longer_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick Longer Duplicate — pick_longer_duplicate","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/pick_longer_duplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick Longer Duplicate — pick_longer_duplicate","text":"","code":"if (FALSE) { # \\dontrun{ pick_longer_duplicate() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/plot_estimated_walltimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the estimated runtimes for different advanced options and number of inputs — plot_estimated_walltimes","title":"Plot the estimated runtimes for different advanced options and number of inputs — plot_estimated_walltimes","text":"function just fun; , messy code","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/plot_estimated_walltimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the estimated runtimes for different advanced options and number of inputs — plot_estimated_walltimes","text":"","code":"plot_estimated_walltimes()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/plot_estimated_walltimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the estimated runtimes for different advanced options and number of inputs — plot_estimated_walltimes","text":"line plot object example: p <- plot_estimated_walltimes() ggplot2::ggsave(filename = \"/data/molevolvr_transfer/molevolvr_dev/molevol_scripts/docs/estimate_walltimes.png\", plot = p)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax.html","id":null,"dir":"Reference","previous_headings":"","what":"prot2tax — prot2tax","title":"prot2tax — prot2tax","text":"prot2tax","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prot2tax — prot2tax","text":"","code":"prot2tax(accnums, suffix, out_path, return_dt = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prot2tax — prot2tax","text":"return_dt","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax_old.html","id":null,"dir":"Reference","previous_headings":"","what":"prot2tax_old — prot2tax_old","title":"prot2tax_old — prot2tax_old","text":"Perform elink go protein database taxonomy database write resulting file taxid lineage out_path","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prot2tax_old — prot2tax_old","text":"","code":"prot2tax_old(accessions, out_path, plan = \"multicore\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prot2tax_old — prot2tax_old","text":"accessions Character vector containing accession numbers query ipg database out_path Path write efetch results plan","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/prot2tax_old.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prot2tax_old — prot2tax_old","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/read_iprscan_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an interproscan output TSV with standardized column names and types — read_iprscan_tsv","title":"Read an interproscan output TSV with standardized column names and types — read_iprscan_tsv","text":"Read interproscan output TSV standardized column names types","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/read_iprscan_tsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an interproscan output TSV with standardized column names and types — read_iprscan_tsv","text":"","code":"read_iprscan_tsv(filepath)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/read_iprscan_tsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an interproscan output TSV with standardized column names and types — read_iprscan_tsv","text":"filepath chr path interproscan output TSV","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/read_iprscan_tsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an interproscan output TSV with standardized column names and types — read_iprscan_tsv","text":"tbl_df interproscan output table","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_astrk.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Astrk — remove_astrk","title":"Remove Astrk — remove_astrk","text":"Remove asterisks column data Used removing * GenContext columns","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_astrk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Astrk — remove_astrk","text":"","code":"remove_astrk(query_data, colname = \"GenContext\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_astrk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Astrk — remove_astrk","text":"colname","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_astrk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Astrk — remove_astrk","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_astrk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Astrk — remove_astrk","text":"","code":"if (FALSE) { # \\dontrun{ remove_astrk() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Empty — remove_empty","title":"Remove Empty — remove_empty","text":"Remove empty rows column Removes empty rows specified column. function ... original data frame returned corresponding cleaned column.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Empty — remove_empty","text":"","code":"remove_empty(prot, by_column = \"DomArch\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Empty — remove_empty","text":"prot data frame containing 'DomArch', 'Species', 'GenContext', 'ClustName' columns. by_column Column empty rows removed domain+domain -> domain(s). Default column 'DomArch'. Can also take following input, 'Species', 'GenContext', 'ClustName'.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Empty — remove_empty","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Empty — remove_empty","text":"","code":"if (FALSE) { # \\dontrun{ remove_empty(prot, \"DomArch\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_tails.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Tails — remove_tails","title":"Remove Tails — remove_tails","text":"Remove tails/singletons function ... Certain low frequency domain architectures can removed. original data frame returned corresponding cleaned column.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_tails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Tails — remove_tails","text":"","code":"remove_tails(prot, by_column = \"DomArch\", keep_domains = FALSE)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_tails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Tails — remove_tails","text":"prot data frame containing 'DomArch', 'GenContext', 'ClustName' columns. by_column Default column 'DomArch'. Can also take 'ClustName', 'GenContext' input. keep_domains Default False Keeps tail entries contain query domains.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_tails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Tails — remove_tails","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/remove_tails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Tails — remove_tails","text":"","code":"if (FALSE) { # \\dontrun{ remove_tails(prot, \"DomArch\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/rename_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename the labels of fasta files — rename_fasta","title":"Rename the labels of fasta files — rename_fasta","text":"Rename labels fasta files Rename labels fasta files","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/rename_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename the labels of fasta files — rename_fasta","text":"","code":"rename_fasta(fa_path, outpath, replacement_function = map_acc2name, ...)  rename_fasta(fa_path, outpath, replacement_function = map_acc2name, ...)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/rename_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename the labels of fasta files — rename_fasta","text":"fa_path Path fasta file outpath Path write altered fasta file replacement_function Function apply lines starting '>' ... Additional arguments pass replacement_function","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/repeat2s.html","id":null,"dir":"Reference","previous_headings":"","what":"repeat2s — repeat2s","title":"repeat2s — repeat2s","text":"Condense repeated domains Condenses repeated domains specified column. function identifies repeated domains condenses (s). ?? Certain domains can removed according additional data frame. original data frame returned corresponding cleaned column.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/repeat2s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"repeat2s — repeat2s","text":"","code":"repeat2s(prot, by_column = \"DomArch\", excluded_prots = c())"},{"path":"https://jravilab.github.io/MolEvolvR/reference/repeat2s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"repeat2s — repeat2s","text":"prot data frame containing 'DomArch', 'GenContext', 'ClustName' columns. by_column Column repeats condensed domain+domain -> domain(s). excluded_prots Vector strings repeat2s reduce (s). Defaults c()","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/repeat2s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"repeat2s — repeat2s","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/repeat2s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"repeat2s — repeat2s","text":"","code":"if (FALSE) { # \\dontrun{ repeat2s(prot, \"DomArch\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/replaceQMs.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace QMs — replaceQMs","title":"Replace QMs — replaceQMs","text":"Replace consecutive '?' separated '->', '<-' '||' 'X(s)' Replace '?' 'X'","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/replaceQMs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace QMs — replaceQMs","text":"","code":"replaceQMs(prot, by_column = \"GenContext\")"},{"path":"https://jravilab.github.io/MolEvolvR/reference/replaceQMs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace QMs — replaceQMs","text":"prot DataTable operate by_column Column operate ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/replaceQMs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace QMs — replaceQMs","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/replaceQMs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace QMs — replaceQMs","text":"","code":"if (FALSE) { # \\dontrun{ replaceQMs() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/reveql.html","id":null,"dir":"Reference","previous_headings":"","what":"reveql — reveql","title":"reveql — reveql","text":"reveql","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/reveql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reveql — reveql","text":"","code":"reveql(prot)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/reveql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reveql — reveql","text":"prot","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/reverse_operon.html","id":null,"dir":"Reference","previous_headings":"","what":"reverse_operon — reverse_operon","title":"reverse_operon — reverse_operon","text":"reverse_operon","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/reverse_operon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reverse_operon — reverse_operon","text":"","code":"reverse_operon(prot)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/reverse_operon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reverse_operon — reverse_operon","text":"prot","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_deltablast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DELTABLAST to find homologs for proteins of interest — run_deltablast","title":"Run DELTABLAST to find homologs for proteins of interest — run_deltablast","text":"Run DELTABLAST find homologs proteins interest","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_deltablast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DELTABLAST to find homologs for proteins of interest — run_deltablast","text":"","code":"run_deltablast(   deltablast_path,   db_search_path,   db = \"refseq\",   query,   evalue = \"1e-5\",   out,   num_alignments,   num_threads = 1 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_deltablast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run DELTABLAST to find homologs for proteins of interest — run_deltablast","text":"db_search_path Path BLAST databases num_threads","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_deltablast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run DELTABLAST to find homologs for proteins of interest — run_deltablast","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_rpsblast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run RPSBLAST to generate domain architectures for proteins of interest — run_rpsblast","title":"Run RPSBLAST to generate domain architectures for proteins of interest — run_rpsblast","text":"Run RPSBLAST generate domain architectures proteins interest","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_rpsblast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run RPSBLAST to generate domain architectures for proteins of interest — run_rpsblast","text":"","code":"run_rpsblast(   rpsblast_path,   db_search_path,   db = \"refseq\",   query,   evalue = \"1e-5\",   out,   num_threads = 1 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/run_rpsblast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run RPSBLAST to generate domain architectures for proteins of interest — run_rpsblast","text":"db_search_path Path BLAST databases num_threads","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/send_job_status_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Sends a ","title":"Sends a ","text":"Sends \"job accepted\" email user job accepted, including details job submission check status.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/send_job_status_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sends a ","text":"","code":"send_job_status_email(   notify_email,   job_dir,   pin_id,   event_type,   context = NULL )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/send_job_status_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sends a ","text":"notify_email email address send notification job_dir directory job's arguments stored, job_args.yml pin_id unique identifier job event_type either 'start' 'end', returns corresponding email given type job_results_url URL user can check status job","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/send_job_status_email.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sends a ","text":"result sendmailR::sendmail() call","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/shorten_lineage.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten Lineage — shorten_lineage","title":"Shorten Lineage — shorten_lineage","text":"Shorten Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/shorten_lineage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten Lineage — shorten_lineage","text":"","code":"shorten_lineage(data, colname = \"Lineage\", abr_len = 1)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/shorten_lineage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten Lineage — shorten_lineage","text":"abr_len","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/shorten_lineage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorten Lineage — shorten_lineage","text":"","code":"if (FALSE) { # \\dontrun{ shorten_lineage() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/sink.reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Sink Reset — sink.reset","title":"Sink Reset — sink.reset","text":"Sink Reset","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/sink.reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sink Reset — sink.reset","text":"","code":"sink.reset()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/sink.reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sink Reset — sink.reset","text":"return, run close outstanding sink()s","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/sink.reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sink Reset — sink.reset","text":"","code":"if (FALSE) { # \\dontrun{ sink.reset() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/stacked_lin_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked Lineage Plot — stacked_lin_plot","title":"Stacked Lineage Plot — stacked_lin_plot","text":"Stacked Lineage Plot","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/stacked_lin_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked Lineage Plot — stacked_lin_plot","text":"","code":"stacked_lin_plot(   prot,   column = \"DomArch\",   cutoff,   Lineage_col = \"Lineage\",   xlabel = \"Domain Architecture\",   reduce_lineage = TRUE,   label.size = 8,   legend.position = c(0.7, 0.4),   legend.text.size = 10,   legend.cols = 2,   legend.size = 0.7,   coord_flip = TRUE,   legend = TRUE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/stacked_lin_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked Lineage Plot — stacked_lin_plot","text":"legend","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/stacked_lin_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked Lineage Plot — stacked_lin_plot","text":"","code":"if (FALSE) { # \\dontrun{ stacked_lin_plot() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/string2accnum.html","id":null,"dir":"Reference","previous_headings":"","what":"string2accnum — string2accnum","title":"string2accnum — string2accnum","text":"string2accnum","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/string2accnum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"string2accnum — string2accnum","text":"","code":"string2accnum(string)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/string2accnum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"string2accnum — string2accnum","text":"string","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/string2accnum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"string2accnum — string2accnum","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/string2accnum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"string2accnum — string2accnum","text":"","code":"if (FALSE) { # \\dontrun{ string2accnum() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.byLin.html","id":null,"dir":"Reference","previous_headings":"","what":"summ.DA.byLin — summ.DA.byLin","title":"summ.DA.byLin — summ.DA.byLin","text":"Function summarize retrieve counts Domains & Domains+Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.byLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summ.DA.byLin — summ.DA.byLin","text":"","code":"summ.DA.byLin(x)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.byLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summ.DA.byLin — summ.DA.byLin","text":"x","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.byLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summ.DA.byLin — summ.DA.byLin","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.byLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summ.DA.byLin — summ.DA.byLin","text":"","code":"if (FALSE) { # \\dontrun{ summ.DA.byLin() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.html","id":null,"dir":"Reference","previous_headings":"","what":"summ.DA — summ.DA","title":"summ.DA — summ.DA","text":"Function retrieve counts many lineages DomArch appears ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summ.DA — summ.DA","text":"","code":"summ.DA(x)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summ.DA — summ.DA","text":"x","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summ.DA — summ.DA","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.DA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summ.DA — summ.DA","text":"","code":"if (FALSE) { # \\dontrun{ summ.DA() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byDALin.html","id":null,"dir":"Reference","previous_headings":"","what":"summ.GC.byDALin — summ.GC.byDALin","title":"summ.GC.byDALin — summ.GC.byDALin","text":"summ.GC.byDALin","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byDALin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summ.GC.byDALin — summ.GC.byDALin","text":"","code":"summ.GC.byDALin(x)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byDALin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summ.GC.byDALin — summ.GC.byDALin","text":"x","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byDALin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summ.GC.byDALin — summ.GC.byDALin","text":"Define return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byDALin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summ.GC.byDALin — summ.GC.byDALin","text":"","code":"if (FALSE) { # \\dontrun{ summ.GC.byDALin } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byLin.html","id":null,"dir":"Reference","previous_headings":"","what":"summ.GC.byLin — summ.GC.byLin","title":"summ.GC.byLin — summ.GC.byLin","text":"summ.GC.byLin","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summ.GC.byLin — summ.GC.byLin","text":"","code":"summ.GC.byLin(x)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summ.GC.byLin — summ.GC.byLin","text":"x","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summ.GC.byLin — summ.GC.byLin","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.byLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summ.GC.byLin — summ.GC.byLin","text":"","code":"if (FALSE) { # \\dontrun{ summ.GC.byLin() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.html","id":null,"dir":"Reference","previous_headings":"","what":"summ.GC — summ.GC","title":"summ.GC — summ.GC","text":"summ.GC","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summ.GC — summ.GC","text":"","code":"summ.GC(x)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summ.GC — summ.GC","text":"x","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summ.GC — summ.GC","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summ.GC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summ.GC — summ.GC","text":"","code":"if (FALSE) { # \\dontrun{ summ.GC() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summarize_bylin.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize by Lineage — summarize_bylin","title":"Summarize by Lineage — summarize_bylin","text":"Summarize Lineage","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summarize_bylin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize by Lineage — summarize_bylin","text":"","code":"summarize_bylin(prot = \"prot\", column = \"DomArch\", by = \"Lineage\", query)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/summarize_bylin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize by Lineage — summarize_bylin","text":"query","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summarize_bylin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize by Lineage — summarize_bylin","text":"Describe return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/summarize_bylin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize by Lineage — summarize_bylin","text":"","code":"if (FALSE) { # \\dontrun{ library(tidyverse) tibble(DomArch = c(\"a+b\", \"a+b\", \"b+c\", \"a+b\"), Lineage = c(\"l1\", \"l1\", \"l1\", \"l2\")) |>     summarize_bylin(query = \"all\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/theme_genes2.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme Genes2 — theme_genes2","title":"Theme Genes2 — theme_genes2","text":"Theme Genes2","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/theme_genes2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme Genes2 — theme_genes2","text":"","code":"theme_genes2()"},{"path":"https://jravilab.github.io/MolEvolvR/reference/to_titlecase.html","id":null,"dir":"Reference","previous_headings":"","what":"Changing case to 'Title Case' — to_titlecase","title":"Changing case to 'Title Case' — to_titlecase","text":"Translate string Title Case w/ delimitter. Translate string Title Case w/ delimitter. Changing case 'Title Case'","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/to_titlecase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changing case to 'Title Case' — to_titlecase","text":"","code":"to_titlecase(text, delimitter)  to_titlecase(text, delimitter)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/to_titlecase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changing case to 'Title Case' — to_titlecase","text":"x Character vector. y Delimitter. Default space (\" \").","code":""},{"path":[]},{"path":"https://jravilab.github.io/MolEvolvR/reference/to_titlecase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changing case to 'Title Case' — to_titlecase","text":"Andrie, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Counts — total_counts","title":"Total Counts — total_counts","text":"Creates data frame totalcount column function designed sum counts column either Genomic Context Domain Architecture creates totalcount column sums.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Counts — total_counts","text":"","code":"total_counts(   prot,   column = \"DomArch\",   lineage_col = \"Lineage\",   cutoff = 90,   RowsCutoff = FALSE,   digits = 2 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Counts — total_counts","text":"prot data frame must contain columns: count column Character. column summarize cutoff Numeric. Cutoff total count. Counts cutoff value shown. Default 0. digits","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Counts — total_counts","text":"Define return, detail","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Total Counts — total_counts","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/total_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Counts — total_counts","text":"","code":"if (FALSE) { # \\dontrun{ total_counts(pspa - gc_lin_counts, 0, \"GC\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"UpSet Plot — upset.plot","title":"UpSet Plot — upset.plot","text":"UpSet plot Domain Architectures vs Domains Genomic Contexts vs Domain Architectures.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UpSet Plot — upset.plot","text":"","code":"upset.plot(   query_data = \"toast_rack.sub\",   colname = \"DomArch\",   cutoff = 90,   RowsCutoff = FALSE,   text.scale = 1.5,   point.size = 2.2,   line.size = 0.8 )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UpSet Plot — upset.plot","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default toast_rack.sub cutoff Numeric. Cutoff word frequency. Default 90. text.scale Allows scaling axis title, tick lables, numbers intersection size bars. text.scale can either take universal scale form integer, vector specific scales format: c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers bars) line.size","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UpSet Plot — upset.plot","text":"\"da2doms\" need file DA.doms.wc well column query_data$DomArch.norep \"gc2da\", need file GC.DA.wc well column query_data$GenContext.norep","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"UpSet Plot — upset.plot","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"UpSet Plot — upset.plot","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/upset.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UpSet Plot — upset.plot","text":"","code":"if (FALSE) { # \\dontrun{ upset.plot(pspa.sub, 10, \"da2doms\") } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"Wordclouds predominant domains (DAs) DAs (GC)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"","code":"wordcloud2_element(   query_data = \"prot\",   colname = \"DomArch\",   cutoff = 70,   UsingRowsCutoff = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default \"prot\". UsingRowsCutoff","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"\"da2doms\" need file DA.doms.wc well column query_data$DomArch.norep \"gc2da\", need file GC.DA.wc well column query_data$GenContext.norep","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud2_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wordclouds for the predominant domains, domain architectures. — wordcloud2_element","text":"","code":"if (FALSE) { # \\dontrun{ wordcloud_element(prot, \"da2doms\", 10) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud3.html","id":null,"dir":"Reference","previous_headings":"","what":"Wordcloud3 — wordcloud3","title":"Wordcloud3 — wordcloud3","text":"Wordcloud3","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wordcloud3 — wordcloud3","text":"","code":"wordcloud3(   data,   size = 1,   minSize = 0,   gridSize = 0,   fontFamily = \"Segoe UI\",   fontWeight = \"bold\",   color = \"random-dark\",   backgroundColor = \"white\",   minRotation = -pi/4,   maxRotation = pi/4,   shuffle = TRUE,   rotateRatio = 0.4,   shape = \"circle\",   ellipticity = 0.65,   widgetsize = NULL,   figPath = NULL,   hoverFunction = NULL )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wordcloud3 — wordcloud3","text":"hoverFunction","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"Wordclouds predominant domains (DAs) DAs (GC)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"","code":"wordcloud_element(   query_data = \"prot\",   colname = \"DomArch\",   cutoff = 70,   UsingRowsCutoff = FALSE )"},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"query_data Data frame protein homologs usual 11 columns + additional word columns (0/1 format). Default \"prot\". UsingRowsCutoff","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"\"da2doms\" need file DA.doms.wc well column query_data$DomArch.norep \"gc2da\", need file GC.DA.wc well column query_data$GenContext.norep","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"Please refer source code alternate file formats /column names.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/wordcloud_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wordclouds for the predominant domains, domain architectures — wordcloud_element","text":"","code":"if (FALSE) { # \\dontrun{ wordcloud_element(prot, \"da2doms\", 10) } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/words2wc.html","id":null,"dir":"Reference","previous_headings":"","what":"Words 2 Word Counts — words2wc","title":"Words 2 Word Counts — words2wc","text":"Get word counts (wc) DOMAINS (DA) DOMAIN ARCHITECTURES (GC)","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/words2wc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Words 2 Word Counts — words2wc","text":"","code":"words2wc(string)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/words2wc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Words 2 Word Counts — words2wc","text":"string","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/words2wc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Words 2 Word Counts — words2wc","text":"tbl_df table 2 columns: 1) words & 2) counts/frequency","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/words2wc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Words 2 Word Counts — words2wc","text":"","code":"if (FALSE) { # \\dontrun{ tibble::tibble(DomArch = c(\"aaa+bbb\", \"a+b\", \"b+c\", \"b-c\")) |>     elements2words() |>     words2wc() } # }"},{"path":"https://jravilab.github.io/MolEvolvR/reference/write.MsaAAMultipleAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Write MsaAAMultpleAlignment Objects as algined fasta sequence — write.MsaAAMultipleAlignment","title":"Write MsaAAMultpleAlignment Objects as algined fasta sequence — write.MsaAAMultipleAlignment","text":"MsaAAMultipleAlignment Objects generated calls msaClustalOmega msaMuscle 'msa' package Write MsaAAMultpleAlignment Objects algined fasta sequence MsaAAMultipleAlignment Objects generated calls msaClustalOmega msaMuscle 'msa' package","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write.MsaAAMultipleAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write MsaAAMultpleAlignment Objects as algined fasta sequence — write.MsaAAMultipleAlignment","text":"","code":"write.MsaAAMultipleAlignment(alignment, outpath)  write.MsaAAMultipleAlignment(alignment, outpath)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/write.MsaAAMultipleAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write MsaAAMultpleAlignment Objects as algined fasta sequence — write.MsaAAMultipleAlignment","text":"alignment MsaAAMultipleAlignment object written fasta outpath resulting FASTA file written ","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write.MsaAAMultipleAlignment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write MsaAAMultpleAlignment Objects as algined fasta sequence — write.MsaAAMultipleAlignment","text":"Samuel Chen, Janani Ravi","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a table of 2 columns: 1) process and 2) median seconds — write_proc_medians_table","title":"Write a table of 2 columns: 1) process and 2) median seconds — write_proc_medians_table","text":"Write table 2 columns: 1) process 2) median seconds","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a table of 2 columns: 1) process and 2) median seconds — write_proc_medians_table","text":"","code":"write_proc_medians_table(dir_job_results, filepath)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a table of 2 columns: 1) process and 2) median seconds — write_proc_medians_table","text":"dir_job_results chr path MolEvolvR job_results filepath path save tsv file","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a table of 2 columns: 1) process and 2) median seconds — write_proc_medians_table","text":"tbl_df 2 columns: 1) process 2) median seconds example: write_proc_medians_table( \"/data/scratch/janani/molevolvr_out/\", \"/data/scratch/janani/molevolvr_out/log_tbl.tsv\" )","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_yml.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute median process runtimes, then write a YAML list of the processes and their median runtimes in seconds to the path specified by 'filepath'. — write_proc_medians_yml","title":"Compute median process runtimes, then write a YAML list of the processes and their median runtimes in seconds to the path specified by 'filepath'. — write_proc_medians_yml","text":"default value filepath value env var MOLEVOLVR_PROC_WEIGHTS, get_proc_weights() also uses default read location.","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_yml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute median process runtimes, then write a YAML list of the processes and their median runtimes in seconds to the path specified by 'filepath'. — write_proc_medians_yml","text":"","code":"write_proc_medians_yml(dir_job_results, filepath = NULL)"},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_yml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute median process runtimes, then write a YAML list of the processes and their median runtimes in seconds to the path specified by 'filepath'. — write_proc_medians_yml","text":"dir_job_results chr path MolEvolvR job_results directory filepath chr path save YAML file; NULL, uses ./molevol_scripts/log_data/job_proc_weights.yml","code":""},{"path":"https://jravilab.github.io/MolEvolvR/reference/write_proc_medians_yml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute median process runtimes, then write a YAML list of the processes and their median runtimes in seconds to the path specified by 'filepath'. — write_proc_medians_yml","text":"","code":"if (FALSE) { # \\dontrun{ write_proc_medians_yml(     \"/data/scratch/janani/molevolvr_out/\",     \"/data/scratch/janani/molevolvr_out/log_tbl.yml\" ) } # }"}]
